/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.configs

import io.sarl.sre.extensions.simulation.configs.AbstractIdentifiableConfig
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AbstractIdentifiableConfig test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-simulation")
@SuppressWarnings("missing_abstract_modifier")
class AbstractIdentifierConfigConfigTest {

	@Nullable
	var config : AbstractIdentifiableConfig
	
	@BeforeEach
	def setUp : void {
		this.config = new AbstractIdentifiableConfig {}
	}
	
	@Test
	@DisplayName("getId")
	def getId : void {
		val id0 = this.config.id
		id0.assertNotNull
		val id1 = this.config.id
		id0.assertSame(id1)
	}

	@Test
	@DisplayName("setId(UUID)")
	def setId_notNull : void {
		val expected = UUID::randomUUID
		this.config.id = expected
		expected.assertSame(this.config.id)
	}

	@Test
	@DisplayName("setId(null)")
	def setId_null : void {
		val id0 = this.config.id
		this.config.id = null
		this.config.id.assertNotNull
		id0.assertNotSame(this.config.id)
	}

}
