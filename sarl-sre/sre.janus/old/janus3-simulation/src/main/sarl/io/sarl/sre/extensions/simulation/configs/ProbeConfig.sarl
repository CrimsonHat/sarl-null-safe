/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.configs

import io.bootique.annotation.BQConfigProperty
import io.sarl.api.probing.Probe
import java.net.URI
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Configuration for a single probe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class ProbeConfig extends AbstractPositionConfig {

	/** Default value of the flag {@link #getOutputToFile()}. */
	public static val OUTPUT_TO_FILE_VALUE = false

	/** Default value of the probe type.
	 */
	@SuppressWarnings("raw_type")
	public static val PROBE_TYPE_VALUE : Class<? extends Probe> = null

	@Accessors(PUBLIC_GETTER)
	var name : String

	@Accessors(PUBLIC_GETTER)
	var uri : URI

	@Accessors(PUBLIC_GETTER)
	var outputToFile = OUTPUT_TO_FILE_VALUE

	@Accessors(PUBLIC_GETTER)
	var fileBasename : String

	@Accessors(PUBLIC_GETTER)
	@SuppressWarnings("raw_type")
	var probeType : Class<? extends Probe> = PROBE_TYPE_VALUE


	new {
		super(Double::NaN, Double::NaN)
	}

	/** Change the name of the probe.
	 *
	 * @param name the name of the probe.
	 */
	@BQConfigProperty("the name of the probe.")
	def setName(name : String) {
		this.name = name		
	}

	/** Change the name or the identifier of the probe.
	 * 
	 * @param name the name or the identifier of the probe.
	 */
	def getNameOrId : String {
		if (this.name.isNullOrEmpty) {
			return getId.toString
		}
		return this.name
	}

	/** Change the reference to the probed resource.
	 * 
	 * @param uri the reference to the probed resource.
	 */
	@BQConfigProperty("the name of the probed resource.")
	def setUri(uri : URI) {
		this.uri = uri
	}

	/** Change the flag that indicates if the probe is supposed to write data
	 * into files.
	 * 
	 * @param uri the reference to the probed resource.
	 */
	@BQConfigProperty("the flag that indicates if the probe is supposed to write data into files.")
	def setOutputToFile(enable : boolean) {
		this.outputToFile = enable
	}

	/** Change the base name of the output file of the probe.
	 * 
	 * @param basename the output file basename.
	 */
	@BQConfigProperty("the base name of the output file for the probe.")
	def setFileBasename(basename : String) {
		this.fileBasename = basename
	}

	/** Change the base name of the output file of the probe.
	 * 
	 * @param basename the output file basename.
	 */
	@BQConfigProperty("the qualified name of the probe type to instance.")
	@SuppressWarnings("raw_type")
	def setProbeType(type : Class<? extends Probe>) {
		this.probeType = if (type === null) PROBE_TYPE_VALUE else type
	}

}
