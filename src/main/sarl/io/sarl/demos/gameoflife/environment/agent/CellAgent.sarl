package io.sarl.demos.gameoflife.environment.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.gameoflife.environment.^agent.events.AgentReadyForGame
import io.sarl.demos.gameoflife.environment.^agent.events.CellAgentUpdated
import io.sarl.demos.gameoflife.environment.^agent.events.GameIsDead

/**
 * @author Jérôme BOULMIER
 *
 */
agent CellAgent {
	uses DefaultContextInteractions, Lifecycle, Logging;

	on Initialize {
		emit(new AgentReadyForGame)
	}

	on Perception {
		loggingName = occurrence.position.toString
		//info("Perception={" + occurrence.neighbors + "}")

		if (occurrence.alive == true) {
			if (occurrence.neighbors.size() != 2 && occurrence.neighbors.size() != 3) {
				//info("Off")
				emit(new CellAgentUpdated(Action.Type.DESTROY, occurrence.position))
			} else {
				//info("Nothing to do")
				emit(new CellAgentUpdated(null, occurrence.position))
			}
		} else {
			if (occurrence.neighbors.size() == 3) {
				//info("On")
				emit(new CellAgentUpdated(Action.Type.CREATE, occurrence.position))
			} else {
				//info("Nothing to do")
				emit(new CellAgentUpdated(null, occurrence.position))
			}
		}
	}

	on GameIsDead {
		killMe
	}
}
