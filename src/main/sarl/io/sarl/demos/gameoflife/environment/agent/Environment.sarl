package io.sarl.demos.gameoflife.environment.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.gameoflife.environment.^agent.events.AgentReadyForGame
import io.sarl.demos.gameoflife.environment.^agent.events.CellAgentUpdated
import io.sarl.demos.gameoflife.environment.^agent.events.GameIsDead
import io.sarl.demos.gameoflife.environment.^agent.events.RegisterEnvironmentListener
import io.sarl.demos.gameoflife.environment.^agent.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.RunEndOfStep
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.Collections
import java.util.concurrent.locks.ReentrantLock
import io.sarl.demos.gameoflife.environment.^agent.events.StepFinished

/**
 * TODO: doc
 *
 * @author Jérôme BOULMIER
 * @author Maxime PINARD
 */
agent Environment {

	uses DefaultContextInteractions, Lifecycle, GridManager, Logging;

	val listeners = <EnvironmentListener>newArrayList
	val actions = Collections.synchronizedList(<Action>newArrayList)
	var controller : Address

	var numberOfAgent : int
	var agentCounter : int

	val lock = new ReentrantLock

	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		var listener = occurrence.parameters.get(2) as EnvironmentListener
		listeners.add(listener)
		controller = occurrence.parameters.get(3) as Address

		numberOfAgent = width * height

		setSkill(new DefaultGridManagerSkill(width, height, listener), GridManager);

		emit(new AgentReadyForGame)
	}

	on CellAgentUpdated {
		//info("RECEIVE: " + occurrence.position + ";" + occurrence.type)
		var tmp : int

		lock.lock
		try {
			if (occurrence.type != null) {
				actions.add(new Action(occurrence.source.UUID, occurrence.position, occurrence.type))
			}
			agentCounter++
			tmp = agentCounter
		} finally {
			lock.unlock
		}

		if (tmp == numberOfAgent) {
			emit(new RunEndOfStep)
		}
	}

	on RunBeginingOfStep {
		//info("BeginOfStep")
		lock.lock
		try {
			this.actions.clear
			agentCounter = 0
		} finally {
			lock.unlock
		}

		// Send perceptions
		for (p : getPerceptions) {
			val adr = new Address(defaultSpace.spaceID, p.key)
			emit(new Perception(p.value, isAlive(p.key), getPosition(p.key)), Scopes::addresses(adr))
		}
	}

	on RunEndOfStep {
		//info("EndOfStep")

		if (actions.size == 0) {
			info("Suicide")
			emit(new GameIsDead)
		} else {
			applyActions(actions)
			fireGridUpdate

			//info("Step Fisnished (Environment)")
			emit(new StepFinished, Scopes.addresses(controller))
		}
	}

	/**
	 * TODO: doc
	 */
	def fireGridUpdate {
		for (listener : listeners) {
			listener.handleGridUpdate(getGrid())
		}
	}

	on RegisterEnvironmentListener {
		listeners.add(occurrence.environmentListener)
	}

	on GameIsDead {
		killMe
	}

}

