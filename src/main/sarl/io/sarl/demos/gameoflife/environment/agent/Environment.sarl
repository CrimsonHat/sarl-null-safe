/** 
 * 
 */
package io.sarl.demos.gameoflife.environment.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.demos.gameoflife.environment.^agent.events.CellAgentReady
import io.sarl.demos.gameoflife.environment.^agent.events.CellAgentUpdated
import io.sarl.demos.gameoflife.environment.^agent.events.CellOff
import io.sarl.demos.gameoflife.environment.^agent.events.CellOn
import io.sarl.demos.gameoflife.environment.^agent.events.GameIsDead
import io.sarl.demos.gameoflife.environment.^agent.events.RegisterEnvironmentListener
import io.sarl.demos.gameoflife.environment.^agent.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.RunEndOfStep
import io.sarl.lang.core.Address
import io.sarl.util.Scopes

/** 
 * @author Jérôme BOULMIER
 * 
 */
agent Environment {
	uses DefaultContextInteractions, Lifecycle, GridManager;

	val listeners = <EnvironmentListener>newArrayList
	val actions = <Action>newArrayList
	var guiAlive = true; // FIXME: Replace this with the controller
	var numberOfAgent : int
	var agentCounter : int
	
	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		numberOfAgent = width * height
		
		setSkill(new DefaultGridManagerSkill(width, height), GridManager);
	}
	
	on CellOff {
		actions.add(new Action(occurrence.emitter, occurrence.position, Action.Type.DESTROY))
	}

	on CellOn {
		actions.add(new Action(occurrence.emitter, occurrence.position, Action.Type.CREATE))
	}

	on CellAgentReady {
		agentCounter++
		
		if (agentCounter == numberOfAgent) {	
			agentCounter = 0
			emit(new RunBeginingOfStep)
		}
	}
	
	on CellAgentUpdated {
		agentCounter++
		
		if (agentCounter == numberOfAgent) {
			agentCounter = 0
			emit(new RunEndOfStep)
		}
	}

	on RunBeginingOfStep {
		synchronized (this) {
			this.actions.clear

			// Send perceptions
			for (p : getPerceptions) {
				val adr = new Address(defaultSpace.spaceID, p.key)
				emit(new Perception(p.value, isAlive(p.key), getPosition(p.key)), Scopes::addresses(adr))
			}
		}
	}
	
	on RunEndOfStep {
		synchronized (this) {
			applyActions(actions)
			
			fireUpdate
			
			// Go to the next step
			if (guiAlive) {
				emit(new RunBeginingOfStep, Scopes.addresses(defaultAddress))
			} else {
				emit(new GameIsDead)
				killMe
			}
		}
	}
	
	def fireUpdate {
		
		for (listener : listeners) {
			
			listener.handleGridUpdate(getGrid());
		}
	}
	
	on RegisterEnvironmentListener {
		listeners.add(occurrence.environmentListener);
	}
}

