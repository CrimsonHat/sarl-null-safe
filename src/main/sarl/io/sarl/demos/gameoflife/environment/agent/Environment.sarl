/** 
 * 
 */
package io.sarl.demos.gameoflife.environment.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.demos.gameoflife.environment.^agent.events.CellOff
import io.sarl.demos.gameoflife.environment.^agent.events.CellOn
import io.sarl.demos.gameoflife.environment.^agent.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.RunEndOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.GUIIsDead

/** 
 * @author Jérôme BOULMIER
 * 
 */
agent Environment {
	uses DefaultContextInteractions, Lifecycle, GridManager;

	val listeners = <EnvironmentListener>newArrayList
	val actions = <Action>newArrayList
	var guiAlive = true;

	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		
		setSkill(new DefaultGridManagerSkill(width, height), GridManager);
	}

	on CellOff {
		actions.add(new Action(occurrence.emitter, occurrence.position, Action.Type.DESTROY))
	}

	on CellOn {
		actions.add(new Action(occurrence.emitter, occurrence.position, Action.Type.CREATE))
	}

	on RunBeginingOfStep {
		synchronized (this) {
			this.actions.clear

			// TODO: Send perceptions
		}
	}
	
	on RunEndOfStep {
		synchronized (this) {
			applyActions(actions)
			
			fireUpdate
			
			// Go to the next step
			if (guiAlive) {
				emit(new RunBeginingOfStep)
			} else {
				emit(new GUIIsDead)
				killMe
			}
		}
	}
	
	def fireUpdate {
		for (listener : listeners) {
			// TODO
			// listener.handleGridUpdate(…)
		}
	}
}

