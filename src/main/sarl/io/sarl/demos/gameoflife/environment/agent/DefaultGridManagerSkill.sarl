/**
 *
 */
package io.sarl.demos.gameoflife.environment.^agent

import com.google.common.base.Preconditions
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import java.util.HashSet
import java.util.List
import java.util.Map
import java.util.Random
import java.util.Set
import java.util.UUID
import org.arakhne.afc.math.MathUtil
import org.arakhne.afc.math.geometry.d2.i.Point2i

/**
 * @author Jérôme BOULMIER
 * @author Maxime PINARD
 */
skill DefaultGridManagerSkill implements GridManager {
	uses DefaultContextInteractions, Logging

	val random = new Random
	val width : int
	val height : int

	val grid : List<List<Pair<UUID, Boolean>>> = newArrayList
	val bodies : Map<UUID, AgentBody> = newTreeMap(null)

	new(width : int, height : int) {
		this.width = width
		this.height = height	
	}

	override install {
		super.install

		for (i : 0 ..< height) {
			val line = newArrayList
			for (j : 0 ..< width) {
				val uuid = spawn(CellAgent, defaultContext.ID)
				line.add(Pair.of(uuid, false))

				val agentBody = new AgentBody(new Point2i(i, j), false)
				bodies.put(uuid, agentBody)
			}
			grid.add(line)
		}

		setup
	}

	override setup {
		for (i : 0 ..< width) {
			for (j : 0 ..< height) {
				val uuid = grid.get(i).get(j).key
				val rand = (random.nextInt(4) == 0)
				grid.get(i).set(j, Pair.of(uuid, rand))
				bodies.get(uuid).alive = rand
			}
		}
	}

	override getPerceptions : List<Pair<UUID, Set<Point2i>>> {
		val sb = new StringBuilder('\n')
		for(i : 0..<height){
			for(j : 0..<width){
				sb.append(if (grid.get(i).get(j).value) "1" else "0")
			}

			sb.append('\n')
		}
		info(sb.toString)

		val perceptions = <Pair<UUID, Set<Point2i>>>newArrayList();

		for(i : 0..<width){
			for(j : 0..< height){
				val set = new HashSet<Point2i>();
				for(k : MathUtil.max(i - 1, 0) .. MathUtil.min(i + 1, width - 1)){
					for(l : MathUtil.max(j - 1, 0) .. MathUtil.min(j + 1, height - 1)){
						if (!(k == i && l == j)) {
							if(grid.get(k).get(l).getValue().equals(Boolean.TRUE)){
								set.add(new Point2i(k - i, l - j));
							}
						}
					}
				}
				perceptions.add(new Pair<UUID, Set<Point2i>>(grid.get(i).get(j).getKey(), set));
			}
		}

		return perceptions;
	}

	override getWidth : int {
		width
	}

	override getHeight : int {
		height
	}

	override applyActions(actions : List<Action>) {
		info("Actions:" + actions)
		for (action : actions) {
			Preconditions::checkArgument(action.getType() != null)
			grid.get(action.getPosition().ix()).
				set(action.getPosition().iy(),
					Pair.of(grid.get(action.getPosition().ix()).get(action.getPosition().iy()).getKey(),
						action.getType() == Action.Type.CREATE
					))

			bodies.get(action.emitter).alive = (action.getType() == Action.Type.CREATE)
		}
	}

	override isAlive(uuid : UUID) : boolean {
		bodies.get(uuid).alive;
	}

	override getPosition(uuid : UUID) : Point2i {
		bodies.get(uuid).position
	}

	override getGrid : List<List<Pair<UUID, Boolean>>> {
		return grid;
	}
}
