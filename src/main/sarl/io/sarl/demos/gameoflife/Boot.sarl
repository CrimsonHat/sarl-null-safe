/**
 *
 */
package io.sarl.demos.gameoflife

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.gameoflife.environment.^agent.Controller
import io.sarl.demos.gameoflife.environment.^agent.Environment
import io.sarl.demos.gameoflife.environment.^agent.events.AgentReadyForGame
import io.sarl.demos.gameoflife.gui.GUI
import io.sarl.lang.core.Address
import java.util.UUID
import java.util.concurrent.locks.ReentrantLock
import javafx.application.Platform

/**
 * @author Maxime PINARD
 *
 */
agent Boot {
	uses DefaultContextInteractions, Lifecycle, Logging;

	var controller : Controller
	var agentCounter : int
	var numberOfAgent : int
	var gui : GUI
	val width = 10
	val height = 10
	val lock = new ReentrantLock

	on Initialize {
		val environmentUUID = UUID.randomUUID

		gui = GUI.getGUI();
		controller = new Controller(defaultSpace, new Address(defaultSpace.spaceID, getID()),
			environmentUUID);
		gui.addGUIListener(controller);

		numberOfAgent = width * height + 1;
		info("There is " + numberOfAgent + " agents.")
		spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui);
	}

	on AgentReadyForGame {
		var tmp : int
		
		lock.lock
		try {
			agentCounter++
			tmp = agentCounter
		} finally {
			lock.unlock
		}
		
		info("Entity loaded: " + tmp)

		if (tmp == numberOfAgent) {
			Platform.runLater([gui.launchGUI(width, height)])
			controller.play
			killMe;
		}
	}
}
