/**
 *
 */
package io.sarl.demos.gameoflife

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.gameoflife.environment.^agent.Controller
import io.sarl.demos.gameoflife.environment.^agent.Environment
import io.sarl.demos.gameoflife.environment.^agent.events.AgentReadyForGame
import io.sarl.demos.gameoflife.environment.^agent.events.PauseEvent
import io.sarl.demos.gameoflife.environment.^agent.events.PlayEvent
import io.sarl.demos.gameoflife.environment.^agent.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.StepFinished
import io.sarl.demos.gameoflife.environment.^agent.events.StopEvent
import io.sarl.demos.gameoflife.gui.GUI
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.UUID
import java.util.concurrent.locks.ReentrantLock
import javafx.application.Platform
import io.sarl.demos.gameoflife.environment.^agent.events.GameIsDead
import io.sarl.demos.gameoflife.environment.^agent.events.SetupEvent

/**
 * @author Maxime PINARD
 *
 */
agent Boot {
	uses DefaultContextInteractions, Lifecycle, Logging;

	var controller : Controller
	var agentCounter : int
	var numberOfAgent : int
	var gui : GUI
	val width = 10
	val height = 10

	var guiReady = true
	var environmentReady = false
	var paused = false
	var gameRunning = false
	var newSetup = false

	val lock = new ReentrantLock
	val environmentUUID = UUID.randomUUID

	on Initialize {
		gui = GUI.getGUI();
		controller = new Controller(defaultSpace, new Address(defaultSpace.spaceID, getID()),
			environmentUUID);
		gui.addGUIListener(controller);

		numberOfAgent = width * height + 1;
		info("There is " + numberOfAgent + " agents.")
		spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui, defaultAddress);
	}

	on AgentReadyForGame {
		var tmp : int
		
		lock.lock
		try {
			agentCounter++
			tmp = agentCounter
		} finally {
			lock.unlock
		}
		
		info("Entity loaded: " + tmp)

		if (tmp == numberOfAgent) {
			Platform.runLater([gui.launchGUI()])
			Platform.runLater([gui.setupGUI(width, height)])
			environmentReady = true
			controller.play
		}
	}

	on PlayEvent {
		lock.lock
		try {
			if (environmentReady && guiReady) {
				info("Starting the game.")
				paused = false
				gameRunning = true
				emit(new RunBeginingOfStep, Scopes::addresses(new Address(defaultSpace.spaceID, environmentUUID)))
			}
		} finally {
			lock.unlock
		}
	}

	on PauseEvent {
		info("Pause Event handled")

		lock.lock
		try {
			paused = true
		} finally {
			lock.unlock
		}
	}

	on StopEvent {
		info("Stop Event handled")

		lock.lock
		try {
			gameRunning = false
		} finally {
			lock.unlock
		}
	}

	on StepFinished {
		lock.lock
		try {
			info("Step Finished: running:" + gameRunning + ", paused:" + paused)
	
			if (gameRunning && !paused) {
				Thread.sleep(1000) //FIXME : Remove hard coded value
				emit(new RunBeginingOfStep, Scopes::addresses(new Address(defaultSpace.spaceID, environmentUUID)))
			} else if (!gameRunning) {
				emit(new GameIsDead)
				killMe
			}
		} finally {
			lock.unlock
		}
	}
	
	on SetupEvent {
		lock.lock

		if (gameRunning && !paused) {
			error("Try to setup a new grid without pausing the game.")
		}

		numberOfAgent = occurrence.width * occurrence.height + 1
		emit(new GameIsDead)
		info("There is " + numberOfAgent + " agents.")
		spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui, defaultAddress)

		lock.unlock
	}
	
	on GameIsDead {
		paused = true
	}
}
