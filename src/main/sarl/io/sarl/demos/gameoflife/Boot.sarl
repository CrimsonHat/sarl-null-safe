package io.sarl.demos.gameoflife

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.gameoflife.environment.^agent.Controller
import io.sarl.demos.gameoflife.environment.^agent.Environment
import io.sarl.demos.gameoflife.environment.^agent.events.AgentReadyForGame
import io.sarl.demos.gameoflife.environment.^agent.events.PauseEvent
import io.sarl.demos.gameoflife.environment.^agent.events.PlayEvent
import io.sarl.demos.gameoflife.environment.^agent.events.RunBeginingOfStep
import io.sarl.demos.gameoflife.environment.^agent.events.StepFinished
import io.sarl.demos.gameoflife.environment.^agent.events.StopEvent
import io.sarl.demos.gameoflife.gui.GUI
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.UUID
import java.util.concurrent.locks.ReentrantLock
import javafx.application.Platform
import io.sarl.demos.gameoflife.environment.^agent.events.GameIsDead
import io.sarl.demos.gameoflife.environment.^agent.events.SetupEvent
import io.sarl.demos.gameoflife.environment.^agent.events.PeriodUpdatedEvent

/**
 * TODO: doc
 *
 * @author Jérôme BOULMIER
 * @author Maxime PINARD
 */
agent Boot {

	uses DefaultContextInteractions, Lifecycle, Logging;

	var controller : Controller
	var agentCounter : int
	var numberOfAgent : int
	var gui : GUI
	var width = 10
	var height = 10
	var period = 500

	var environmentReady = false
	var paused = false
	var gameRunning = false
	var newSetup = false

	val lock = new ReentrantLock
	val environmentUUID = UUID.randomUUID

	on Initialize {
		gui = GUI.getGUI();
		controller = new Controller(defaultSpace, new Address(defaultSpace.spaceID, getID()),
			environmentUUID);
		gui.addGUIListener(controller);
		controller.addControllerListener(gui);

		Platform.runLater([gui.launchGUI()])
		controller.setReadyToSetup(true);
		/*numberOfAgent = width * height + 1;
		info("There is " + numberOfAgent + " agents.")
		spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui, defaultAddress);*/
	}

	on AgentReadyForGame {
		var tmp : int

		lock.lock
		try {
			agentCounter++
			tmp = agentCounter
		} finally {
			lock.unlock
		}

		//info("Entity loaded: " + tmp)

		if (tmp == numberOfAgent) {
			info("Running GUI")
			Platform.runLater([gui.setupGUI(width, height)])
			environmentReady = true
			controller.setReadyToPlay(true);
		}
	}

	on PlayEvent {
		lock.lock
		try {
			if (environmentReady) {
				controller.setReadyToPause(true);
				controller.setReadyToSetup(false);
				controller.setReadyToPlay(false);
				info("Starting the game.")
				paused = false
				gameRunning = true
				emit(new RunBeginingOfStep, Scopes::addresses(new Address(defaultSpace.spaceID, environmentUUID)))
			}
		} finally {
			lock.unlock
		}
	}

	on PauseEvent {
		info("Pause Event handled")

		lock.lock
		try {
			controller.setReadyToPlay(true);
			controller.setReadyToPause(false);
			controller.setReadyToSetup(true);
			paused = true
		} finally {
			lock.unlock
		}
	}

	on StopEvent {
		info("Stop Event handled")

		lock.lock
		try {
			if (!gameRunning || paused) {
				emit(new GameIsDead)
				killMe
			} else {
				gameRunning = false
			}
		} finally {
			lock.unlock
		}
	}

	on StepFinished {
		lock.lock
		try {
			//info("Step Finished: running:" + gameRunning + ", paused:" + paused)

			if (gameRunning && !paused) {
				Thread.sleep(period)
				emit(new RunBeginingOfStep, Scopes::addresses(new Address(defaultSpace.spaceID, environmentUUID)))
			} else if (!gameRunning) {
				emit(new GameIsDead)
				killMe
			}
		} finally {
			lock.unlock
		}
	}

	on SetupEvent {
		lock.lock

		if (gameRunning && !paused) {
			error("Try to setup a new grid without pausing the game.")
		}

		width = occurrence.width
		height = occurrence.height
		numberOfAgent = occurrence.width * occurrence.height + 1
		emit(new GameIsDead)
		info("There is " + numberOfAgent + " agents.")
		spawnInContextWithID(Environment, environmentUUID, defaultContext, width, height, gui, defaultAddress)

		lock.unlock
	}

	on PeriodUpdatedEvent {
		lock.lock
		info("Period updated")
		period = occurrence.period

		lock.unlock
	}

	on GameIsDead {
		controller.setReadyToPlay(false)
		controller.setReadyToPause(false);
		controller.setReadyToSetup(true);
		paused = true
	}

}

