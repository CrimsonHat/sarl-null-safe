/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.engine.services.time

import io.sarl.sre.extensions.simulation.configs.SimulationConfig
import io.sarl.sre.extensions.simulation.configs.TimeConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.services.time.AbstractTimeService
import io.sarl.sre.services.time.TimeListener
import java.text.MessageFormat
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Time service based on a simulated time and using a constant step time evolution.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class ConstantStepSimulatedTimeService extends AbstractTimeService implements SimulatedTimeService {

	var simulatedTime = 0.0

	var osTimeOfPreviousStep = 0.0

	var osDelta = 0.0

	var osFactor = 1.0

	@Accessors(PUBLIC_GETTER)
	val timeConfiguration : TimeConfig

	@Accessors(PUBLIC_GETTER)
	val loggingService : LoggingService

	/** Create a simulated time service.
	 * 
	 * @param loggingService the logging service.
	 * @param config the accessor to the simulation configuration.
	 * @param listeners the empty collection of listeners that must be used by this service. 
	 */
	@Inject
	new (loggingService : LoggingService, config : SimulationConfig, listeners : SmartListenerCollection<TimeListener>) {
		this(loggingService, config.time, listeners)
	}

	/** Create a simulated time service.
	 * 
	 * @param loggingService the logging service.
	 * @param config the accessor to the time configuration.
	 * @param listeners the empty collection of listeners that must be used by this service. 
	 */
	new (loggingService : LoggingService, config : TimeConfig, listeners : SmartListenerCollection<TimeListener>) {
		super(listeners)
		this.loggingService = loggingService
		this.timeConfiguration = config
		this.osTimeOfPreviousStep = this.OSCurrentTime
	}

	override getTime(timeUnit : TimeUnit) : double {
		 val tp = timePrecision
		 val tu = timeUnit ?: tp
		 if (tu === tp) {
		 	return this.simulatedTime
		 }
		 return this.simulatedTime.convertFromTo(tp, tu)
	}
	
	override getOSCurrentTime : long {
		System::currentTimeMillis
	}
	
	override getOSTimeFactor : double {
		 this.osFactor
	}

	override getOSStepDuration : double {
		this.osDelta
	}
	
	override getTimePrecision : TimeUnit {
		this.timeConfiguration.unit
	}

	override getDt : double {
		this.timeConfiguration.timeStep
	}
	
	override evolveTimeIfPossible(timeDelta : double) : boolean {
		var td : double
		if (timeDelta <= 0.0) {
			td = this.timeConfiguration.timeStep
		} else {
			td = timeDelta
		}
		if (td > 0.0) {
			this.simulatedTime += td
			// Update the OS indicators
			val currentOSTime = this.OSCurrentTime
			this.osDelta = currentOSTime - this.osTimeOfPreviousStep
			this.osFactor = this.osDelta / timeDelta
			this.osTimeOfPreviousStep = this.OSCurrentTime
			if (this.timeConfiguration.timeProgressionInLogs) {
				this.loggingService.kernelLogger.info [
					MessageFormat::format(Messages::SimulatedTimeService_0, this.simulatedTime)
				]
			}
			fireTimeChanged
			return true
		}
		return false
	}
	
	override setTimeIfPossible(time : double) : boolean {
		if (time != this.simulatedTime) {
			this.simulatedTime = time
			fireTimeChanged
			return true
		}
		return false
	}
	
}
