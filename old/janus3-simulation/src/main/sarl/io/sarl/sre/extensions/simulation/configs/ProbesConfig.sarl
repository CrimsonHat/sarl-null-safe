/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.configs

import io.bootique.annotation.BQConfigProperty
import java.io.File
import java.util.Collection
import java.util.List
import java.util.Map
import java.util.UUID
import org.arakhne.afc.vmutil.FileSystem
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Configuration for all the probes.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class ProbesConfig {

	/** 
	 * Prefix for the configuration entries of the probes configurations.
	 */
	public static val PREFIX : String = SimulationConfig::PREFIX + ".probes"; // $NON-NLS-1$

	/** 
	 * Name of the property that contains the default folder in which the probes
	 * should write data.
	 * 
	 * @see #FOLDER_VALUE
	 */
	public static val FOLDER_NAME = PREFIX + ".folder"

	/** 
	 * The default name for the folder in which the probes are supposed to
	 * write data.
	 * 
	 * @see #FOLDER_NAME
	 */
	public static val FOLDER_VALUE = "probes"

	@Accessors(PUBLIC_GETTER)
	var folderName : String = FOLDER_VALUE

	var probeFolder : File

	var probes : Map<UUID, ProbeConfig>

	/** Change the name of the folder in which the probes are supposed to write the data.
	 * 
	 * @param name the folder name.
	 */
	@BQConfigProperty("name of the output folder for probes.")
	def setFolderName(name : String) {
		this.folderName = if (name.isNullOrEmpty) FOLDER_VALUE else name
	}

	/** Replies the folder in which the probes are supposed to to write data. */
	def getProbeFolder : File {
		if (this.probeFolder === null) {
			this.probeFolder = FileSystem::convertStringToFile(getFolderName)
		}
		return this.probeFolder
	}

	private def ensureProbes : Map<UUID, ProbeConfig> {
		if (this.probes === null) {
			this.probes = newHashMap
		}
		return this.probes
	}

	/** Replies the list of the configured probes.
	 * 
	 * @return the list of the configured probes.
	 */
	def getProbes : Collection<ProbeConfig> {
		return ensureProbes.values.unmodifiableView
	}

	/** Change the list of the configured probes.
	 * Any previously defined probe will be lost by calling this function.
	 * 
	 * @param list the new list of the configured probes.
	 */
	@BQConfigProperty("list of defined probes.")
	def setProbes(probes : List<ProbeConfig>) {
		var map = ensureProbes
		for (probe : probes) {
			val id = probe.id
			map.put(id, probe)
		}
	}

	/** Replies the configuration for the probe with the given identifier.
	 *
	 * @param id the identifier of the probe to search for.
	 * @return the probe configuration, or {@code null} if it is not found.
	 */
	def getProbe(id : UUID) : ProbeConfig {
		ensureProbes.get(id)
	}

}
