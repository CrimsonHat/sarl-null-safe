/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.engine.services.time

import io.sarl.sre.extensions.simulation.configs.TimeConfig
import io.sarl.sre.services.time.TimeService
import java.util.concurrent.TimeUnit

/**
 * Time service based on a simulated time.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
interface SimulatedTimeService extends TimeService {

	/** Constant that represents a time that means "as soon as possible". */
	val AS_SOON_AS_POSSIBLE = Double::NEGATIVE_INFINITY

	/** Constant that represents a time that means "never".
	 */
	val NEVER = Double::POSITIVE_INFINITY
	
	/** Replies the configuration that is related to the simulated time.
	 */
	def getTimeConfiguration : TimeConfig

	/** The execution time for the last simulation step.
	 *
	 * @return the duration of the last simulation step in milliseconds.
	 */
	def getOSStepDuration : double

	/** Replies the default time precision that is used by the time manager.
	 */	
	def getTimePrecision : TimeUnit

	/** The current simulation step (dt) in simulated seconds.
	 *
	 * @return the duration of one simulation step (in simulated time).
	 */
	def getDt : double

	/** Change the simulated time if possible.
	 * This function increases the simulated time by the simulated step
	 * specified into the time configuration.
	 * 
	 * @param timeDelta the time progress. By default, or if it is lower or equal
	 * to zero, the time progress step from the configuration is used.
	 * @return {@code true} if the time has evolved.
	 */
	def evolveTimeIfPossible(timeDelta : double = 0.0) : boolean

	/** Change the simulated time if possible.
	 * This function forces the simulated time with the given value.
	 * 
	 * @param time the new simulated time.
	 * @return {@code true} if the time has c.
	 */
	def setTimeIfPossible(time : double) : boolean
	
}
