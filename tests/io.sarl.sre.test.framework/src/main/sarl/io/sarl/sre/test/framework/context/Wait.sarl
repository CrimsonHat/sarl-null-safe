/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.context

import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference
import org.eclipse.xtend.lib.annotations.ToString

import static io.sarl.sre.test.framework.Constants.*

/**
 * OBject that enables to wait for a specific thing.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@ToString
class Wait {
	
	val lock : AtomicBoolean

	val errorContainer : AtomicReference<Throwable>

	package new (lock : AtomicBoolean, errorContainer : AtomicReference<Throwable>) {
		this.lock = lock
		this.errorContainer = errorContainer
	}

	/** Wait. */
	def doWait(timeout : int = STANDARD_TIMEOUT) : void {
		if (timeout > 0) {
			val endTime = System::currentTimeMillis + timeout.seconds
			while (!this.lock.get && this.errorContainer.get === null && System::currentTimeMillis <= endTime) {
				Thread::sleep(100)
			}
			val directException = this.errorContainer.get
			if (directException !== null) {
				throw directException
			} else if (!this.lock.get) {
				throw new SreTimeoutException
			}
		} else {
			while (!this.lock.get && this.errorContainer.get === null) {
				Thread::sleep(100)
			}
			val directException = this.errorContainer.get
			if (directException !== null) {
				throw directException
			}
		}
	}

}
