/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.test.framework.context

import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.sre.test.framework.Constants
import io.sarl.sre.test.framework.exception.SreLogException
import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.List
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.CopyOnWriteArrayList
import java.util.concurrent.TimeoutException
import java.util.concurrent.atomic.AtomicReference
import java.util.logging.Handler
import java.util.logging.Level
import java.util.logging.LogRecord
import org.arakhne.afc.bootique.log4j.configs.Log4jIntegrationConfig
import org.arakhne.afc.bootique.variables.VariableNames
import org.eclipse.xtend.lib.annotations.Accessors
import org.opentest4j.AssertionFailedError

import static org.junit.jupiter.api.Assertions.*

import static extension org.junit.jupiter.api.Assertions.assertEquals

/**
 * Context for running the SRE. This context is thread-safe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class SreRunContext {

	/** 
	 * Reference to the instance of the root context.
	 */
	@Accessors(PUBLIC_GETTER)
	volatile var rootContext : AgentContext

	/** 
	 * Reference to the instance of the SRE bootstrap.
	 */
	@Accessors(PUBLIC_GETTER)
	volatile var bootstrap : SREBootstrap

	val globalResults = new ConcurrentHashMap<UUID, CopyOnWriteArrayList<Object>>

	val directFailureCause = new AtomicReference<Throwable>

	/** Replies the identifier of the lastly booted agent.
	 * 
	 * @return the identifier of the agent, or {@code null} if no agent was booted.
	 */
	def getBootAgent : UUID {
		this.bootstrap.bootAgentIdentifier
	}

	/** 
	 * Replies result at the given index of the run of the agent.
	 * 
	 * @param source - the source of the data.
	 * @param type - the type of the result.
	 * @param index - the index of the result.
	 * @return the value; or {@code null} if no result.
	 */
	@Pure
	static def get(source : List<?>, type : Class<T>, index : int) : T with T {
		var element = source.get(index);
		if (element === null || type.isInstance(element)) {
			return type.cast(element);
		}
		return null
	}

	private def key(agentId : UUID) : UUID {
		var id = agentId
		if (id === null) {
			id = bootAgent
		}
		if (id === null) {
			return UUID::randomUUID
		}
		return id
	}

	/** 
	 * Replies result at the given index of the run of the agent.
	 * 
	 * @param agentId the identifier of the agent.
	 * @param type - the type of the result.
	 * @param index - the index of the result.
	 * @return the value; or {@code null} if no result.
	 */
	def getResult(agentId : UUID = null, type : Class<T>, index : int) : T with T {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				return type.cast(res.get(index))
			}
		} catch (exception : Throwable) {
			//
		}
		return null
	}

	/** 
	 * Replies first result of the given type of the run of the agent.
	 * 
	 * @param agentId the identifier of the agent.
	 * @param type - the type of the result.
	 * @return the value; or {@code null} if no result.
	 * @since 0.11
	 */
	def getFirstResultOfType(agentId : UUID = null, type : Class<T>) : T with T {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				for (value : res) {
					if (type.isInstance(value)) {
						return type.cast(value)
					}
				}
			}
		} catch (exception : Throwable) {
			//
		}
		return null
	}

	/** Replies the number of results that are provided by the agent.
	 * 
	 * @return the number of results.
	 */
	def getNumberOfResults(agentId : UUID = null) : int {
		val list = this.globalResults.get(agentId.key)
		if (list !== null) {
			return list.size
		}
		return 0
	}

	/** 
	 * Test if the number of results provided by the SRE platform is equal to the given number.
	 * 
	 * @param expected - the expected number of results.
	 */
	def assertNumberOfResults(expected : int) {
		expected.assertEquals(getNumberOfResults)["Invalid number of results provided by the platform."]
	}

	/** 
	 * Replies result for the boot agent or the agent with the given identifier.
	 * 
	 * @param agentId the identifier of the agent for which the results must be retrieved.
	 * If {@code null} or not provided, the results associated to the boot agent are
	 * replied.
	 * @return the results.
	 */
	def getResults(agentId : UUID = null) : List<Object> {
		val res = this.globalResults.get(agentId.key)
		if (res !== null) {
			return res.unmodifiableView
		}
		return emptyList
	}

	/** 
	 * Add a value to the list of results.
	 * 
	 * @param agentId the identifier of the agent for which the results must be retrieved.
	 * If {@code null} or not provided, the results associated to the boot agent are
	 * replied.
	 * @param value the new value.
	 */
	def addResult(agentId : UUID = null, value : Object) : void {
		val id = agentId.key
		var res = this.globalResults.computeIfAbsent(id) [
			new CopyOnWriteArrayList
		]
		res += value
	}

	/** 
	 * Replies all the results for all the agents.
	 * @return the results.
	 */
	def getAllResultsPerAgent() : ConcurrentHashMap<UUID, CopyOnWriteArrayList<Object>> {
		return globalResults
	}

	/** 
	 * Replies all the results for all the agents.
	 * @return the results.
	 */
	def getAllResults() : List<Object> {
		var all = newArrayList
		for (values : this.globalResults.values) {
			all.addAll(values)
		}
		return all
	}
	
	/** 
	 * Replies the initialization parameters for the agents.
	 * @return the parameters.
	 */
	def getAgentInitializationParameters : Object[] {
		#[this]
	}

	/** 
	 * Replies the index of the first result of the given type starting at the given index.
	 * 
	 * @param agentId the identifier of the agent.
	 * @param type - the type of the result.
	 * @param fromIndex - the start index.
	 * @return the index; or <code>-1</code> if not found.
	 */
	def indexOfResult(agentId : UUID = null, type : Class<?>, fromIndex : int = 0) : int {
		try {
			val res = this.globalResults.get(agentId.key)
			if (res !== null) {
				for (var i = fromIndex; i < res.size; i++) {
					var r = res.get(i)
					if (type.isInstance(r)) {
						return i
					}
				}
			}
		} catch (exception : Throwable) {
			//
		}
		return -1
	}

	/** 
	 * Start the SRE platform.
	 * 
	 * @param type - the type of the agent to launch at start-up.
	 * @param loggingLevel indicates the level of logging.
	 * @param trackLogErrors indicates if the logged errors should be tracked.
	 * @param deleteLogHandlers indicates if the loggers' handler should be removed.
	 * @param timeout - the maximum waiting time in seconds, or <code>-1</code> to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	def runSre(type : Class<? extends Agent>, loggingLevel : Level = null,
		trackMode : LogTrackingMode = null,
		timeout : int = Constants::STANDARD_TIMEOUT) : SREBootstrap {
		val kern = setupTheSreKernel(type, loggingLevel, trackMode)
		try {
			waitForTheKernel(timeout)
		} catch (exception : SreTimeoutException | TimeoutException) {
			kern.shutdown(true)
			throw exception
		}
		return kern
	}
	
	/** Assert that the context has no error on its logs.
	 */
	def assertNoErrorLogInResults {
		for (obj : getResults(null)) {
			if (obj instanceof LogRecord) {
				throw new AssertionFailedError("Unexpected error log", "", obj.toString)
			}
		}
	}

	/** Assert that not exception is inside the results of the test run.
	 */
	def assertNoExceptionInResults {
		var list = newArrayList
		for (obj : allResults) {
			if (obj instanceof Throwable) {
				list += obj
			}
		}
		if (!list.empty) {
			// Only the first is logged
			throw list.get(0)
		}
	}

	/** 
	 * Set-up the SRE platform.
	 * 
	 * @param type - the type of the agent to launch at start-up.
	 * @param loggingLevel - indicates the level of logging.
	 * @param trackMode is the mode of log tracking to be used.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def setupTheSreKernel(type : Class<? extends Agent>, loggingLevel : Level,
		trackMode : LogTrackingMode) : SREBootstrap {
		var k = setupTheSreKernel(loggingLevel, trackMode)
		this.bootstrap.startAgent(type, getAgentInitializationParameters)
		return k
	}

	/** 
	 * Set-up the SRE platform.
	 * 
	 * @param loggingLevel indicates the level of logging.
	 * @param trackMode is the mode of log tracking to be used.
	 * @return the kernel.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def setupTheSreKernel(loggingLevel : Level, trackMode : LogTrackingMode) : SREBootstrap {
		assertNull(this.rootContext, "SRE already launched.")
		val tm = trackMode ?: LogTrackingMode::FAIL_ON_ERROR
		val lvl = loggingLevel ?: Constants::TEST_LOGGING_LEVEL
		val glvl = org.arakhne.afc.bootique.log4j.configs.Level::valueOf(lvl)
		System::setProperty(VariableNames::toPropertyName(Log4jIntegrationConfig::LEVEL), glvl.name)
		this.globalResults.clear
		this.bootstrap = SRE::getBootstrap
		this.bootstrap.startWithoutAgent
		val logger = this.bootstrap.kernelLogger
		switch (tm) {
			case SILENT: {
				for (handler : logger.handlers) {
					logger.removeHandler(handler)
				}
				logger.addHandler(IDDLE_LOG_HANDLER)
			}
			case STANDARD_LOGGER_BEHAVIOR: {
				// Do nothing special with the logger
			}
			case ADD_TO_AGENT_RESULTS: {
				for (handler : logger.handlers) {
					logger.removeHandler(handler)
				}
				logger.addHandler(RESULT_FILLER_LOG_HANDLER)
			}
			case FAIL_ON_ERROR: {
				for (handler : logger.handlers) {
					logger.removeHandler(handler)
				}
				logger.addHandler(FAILURE_LOG_HANDLER)
			}
			case STANDARD_LOGGER_BEHAVIOR_AND_FAIL_ON_ERROR: {
				logger.addHandler(FAILURE_LOG_HANDLER)
			}
		}
		return this.bootstrap
	}

	static val IDDLE_LOG_HANDLER = new Handler {
		override publish(record : LogRecord) {
		}

		override flush {
		}

		override close {
		}
	}

	val RESULT_FILLER_LOG_HANDLER = new Handler {
		override publish(record : LogRecord) {
			if (record.level === Level.SEVERE) {
				addResult(record)
			}
		}

		override flush {
		}

		override close {
		}
	}

	val FAILURE_LOG_HANDLER = new Handler {
		override publish(record : LogRecord) {
			if (record.level === Level.SEVERE) {
				var exception = record.thrown
				if (exception === null) {
					exception = new SreLogException(record)
				}
				directFailureCause.set(exception)
			}
		}

		override flush {
		}

		override close {
		}
	}

	/** 
	 * Wait for the end of the SRE platform.
	 * 
	 * @param timeout - the maximum waiting time in seconds, or <code>-1</code> to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	def waitForTheKernel(timeout : int) {
		waitForTheKernel(timeout, null)
	}

	/** 
	 * Wait for the end of the SRE platform.
	 * 
	 * @param timeout - the maximum waiting time in seconds, or <code>-1</code> to ignore the timeout.
	 * See {@link #STANDARD_TIMEOUT}, {@link #EXTRA_TIMEOUT} or {@link #NO_TIMEOUT}.
	 * @param predicate the predicate to use as stop condition.
	 * @throws Exception - if the kernel cannot be launched.
	 */
	@SuppressWarnings("discouraged_reference")
	def waitForTheKernel(timeout : int, predicate : (ConcurrentHashMap<UUID, CopyOnWriteArrayList<Object>>)=>boolean) {
		var endTime : long
		if (timeout >= 0) {
			endTime = System::currentTimeMillis() + timeout.seconds
		} else {
			endTime = -1
		}
		var isSreRunning = this.bootstrap.running
		while (this.directFailureCause.get === null && isSreRunning && (endTime == -1 || System.currentTimeMillis() <= endTime)) {
			isSreRunning = this.bootstrap.isRunning() || (predicate !== null && (!(predicate.apply(this.globalResults))))
			Thread.sleep(100)
		}
		val directException = this.directFailureCause.get
		if (directException !== null) {
			throw directException
		} else if (isSreRunning) {
			var cause : Throwable = null
			for (result : allResults) {
				if (result instanceof Throwable) {
					cause = result
					break
				}
			}
			if (cause !== null) {
				throw new SreTimeoutException(cause)
			}
			throw new SreTimeoutException
		}
	}

	/** 
	 * Forget any reference to a SRE kernel.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI
	def shutdown : void {
		var m = this.bootstrap
		this.bootstrap = null
		if (m !== null) {
			m.shutdown(false)
		}
		this.rootContext = null
		this.globalResults.clear
	}

}
