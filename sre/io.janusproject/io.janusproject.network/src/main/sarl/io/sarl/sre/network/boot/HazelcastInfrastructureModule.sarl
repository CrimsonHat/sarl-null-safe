package io.sarl.sre.network.boot

import com.google.common.util.concurrent.Service
import com.google.inject.AbstractModule
import com.google.inject.Module
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.sarl.sre.services.infrastructure.InfrastructureService
import javax.inject.Singleton

import static extension com.google.inject.multibindings.Multibinder.*
import io.sarl.sre.network.services.HazelcastInfrastructureService

/** 
 * Module for the Hazelcast infrastructure services.
 * 
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class HazelcastInfrastructureServiceModule extends AbstractModule {

	protected override configure {
		typeof(InfrastructureService).bind.to(typeof(HazelcastInfrastructureService)).in(typeof(Singleton))

		//binder.newSetBinder(typeof(Service), typeof(SreServices)).addBinding.to(typeof(InfrastructureService))
	}

}

/** Provider of the module for the Hazelcast infrastructure services.
 * 
 * @author $Author: ngaud$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class HazelcastInfrastructureServiceModuleProvider implements BQModuleProvider {

	override module : Module {
		return new HazelcastInfrastructureServiceModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(Messages::HazelcastInfrastructureServiceModuleProvider_0);
	}

}
