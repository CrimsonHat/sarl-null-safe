/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1500.bug1038.mocks

import io.sarl.core.AgentKilled
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.ParticipantJoined
import io.sarl.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID

@SuppressWarnings("all")
agent PingAgent {

	uses DefaultContextInteractions, Schedules, Behaviors, ExternalContextAccess, Lifecycle, InnerContextAccess
	uses TestingCapacity

	var comspace : OpenEventSpace

	var MAX_ITERATION : int

	var level : int

	var sharedSpaceID : UUID

	var spawner : UUID

	var childID : UUID

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		this.level = typeof(String).getParam(2) as Integer
		this.sharedSpaceID = typeof(String).getParam(0) as UUID

		this.comspace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification), this.sharedSpaceID)
		this.comspace.registerStrongParticipant(asEventListener)

		this.MAX_ITERATION = typeof(String).getParam(1) as Integer
		this.spawner = occurrence.spawner
		this.childID = UUID::randomUUID
	}

	on ParticipantJoined [!isFromMe && this.comspace !== null && occurrence.spaceID == comspace.spaceID] {
		val task = task("waiting_for_partner")
		task.every(1000) [
			if (this.comspace.numberOfStrongParticipants > 1) {
				var evt = new Ping(0)
				evt.source = this.comspace.getAddress(getID())

				this.comspace.emit(evt)
				task.cancel
			}
		]
	}

	on Pong [occurrence.index < MAX_ITERATION] {
		this.comspace.emit(new Ping(occurrence.index + 1))[it.UUID == occurrence.source.UUID]
	}

	on Pong [occurrence.index == MAX_ITERATION] {
		if (this.level < MAX_ITERATION) {
			val ic0 = innerContext
			assert ic0 !== null
			typeof(PingAgent).spawnInContextWithID(this.childID, ic0,
				buildAgentInitializationParameters(
					this.sharedSpaceID.toString,
					this.MAX_ITERATION.toString,
					(this.level + 1).toString
				))
			val ic1 = innerContext
			assert ic1 !== null
			assert ic0 === ic1
			this.comspace.emit(new joinContext(ic1.ID, ic1.defaultSpace.spaceID.ID)) [
				it.UUID == occurrence.source.UUID
			]
		} else {
			killMe
		}

	}

	on AgentKilled {
		if (occurrence.isInInnerDefaultSpace) {
			if (!hasMemberAgent) {
				killMe
			}
		}
	}

}
