/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.internal

import io.sarl.lang.core.Agent
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.skills.bic.SchedulesSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.skills.internal.mocks.MyAgent
import io.sarl.sre.tests.units.skills.internal.mocks.MyLoggingSkill
import io.sarl.tests.api.Nullable
import java.util.UUID
import org.junit.Before
import org.junit.Test

import static extension org.mockito.Mockito.*
import org.mockito.ArgumentCaptor
import java.util.logging.Logger

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class InternalSchedulesSkillTest extends AbstractSreTest {

	@Nullable
	var contextId : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var logger : MyLoggingSkill

	@Nullable
	var executor : ExecutorService

	@Nullable
	var ^skill : SchedulesSkill

	@Before
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.logger = new MyLoggingSkill().spy
		this.^agent = new MyAgent(contextId, this.^agentId, this.logger).spy
		this.executor = typeof(ExecutorService).mock
		this.^skill = new SchedulesSkill(this.executor)
		this.reflect.invoke(this.^skill, "setOwner", this.^agent)
	}

	@Test
	def internalSchedules {
		typeof(InternalSchedules).assertInstanceOf(this.^skill)
	}
	
	@Test
	def executeAsap : void{
		var runnable = typeof(Runnable).mock
	
		var task = this.^skill.executeAsap(runnable)

		task.assertNotNull

		var loggerCapture = ArgumentCaptor::forClass(typeof(Logger))
		var runnableCapture = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(1.times).executeAsap(loggerCapture.capture, runnableCapture.capture)
		
		runnableCapture.value.assertNotNull
		runnable.assertNotSame(runnableCapture.value)

		task.procedure.assertNotNull
		runnableCapture.value.assertNotSame(task.procedure)
	}

}
