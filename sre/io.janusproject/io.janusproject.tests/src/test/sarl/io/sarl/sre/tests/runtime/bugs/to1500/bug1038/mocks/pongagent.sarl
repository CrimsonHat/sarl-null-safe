/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1500.bug1038.mocks

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.ParticipantJoined
import io.sarl.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.locks.ReentrantLock
import io.sarl.core.AgentKilled

@SuppressWarnings("all")
agent PongAgent {

	uses DefaultContextInteractions, Behaviors, ExternalContextAccess, Lifecycle, InnerContextAccess, Schedules
	uses TestingCapacity

	var comspace : OpenEventSpace

	var MAX_ITERATION : int

	var level : int

	var sharedSpaceID : UUID

	var spawner : UUID

	var childID : UUID
	
	var lock = new ReentrantLock
	var isChildSpawned = false;
	var jevent : joinContext = null;

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		this.level = typeof(String).getParam(2) as Integer
		this.sharedSpaceID = typeof(String).getParam(0) as UUID
		if (this.level === 0) {
			this.comspace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification), this.sharedSpaceID)
			this.comspace.registerStrongParticipant(asEventListener)
		}
		this.MAX_ITERATION = typeof(String).getParam(1) as Integer
		this.spawner = occurrence.spawner

		this.childID = UUID.randomUUID
	}

	on joinContext [!isFromMe && (this.comspace !=null) && isInSpace(this.comspace)] {
		this.lock.lock
		try {
			this.jevent = new joinContext(occurrence)
			if (this.isChildSpawned) {
				innerContext.defaultSpace.emit(this.jevent)[it.UUID == this.childID]		
			}
		} finally {
			this.lock.unlock
		}
	}

	on ParticipantJoined [occurrence.spaceID == innerContext.defaultSpace.spaceID && isFrom(this.childID)] {
		this.lock.lock
		try {
			this.isChildSpawned = true
			if (this.jevent != null) {
				innerContext.defaultSpace.emit(this.jevent)[it.UUID == this.childID]
			}
		} finally {
			this.lock.unlock
		}
	}

	on joinContext [isFrom(this.spawner) && isInDefaultSpace] {
		var cID = occurrence.subContextID
		var sID = occurrence.subContextDefaultSpaceID 
		var joiningState = join(cID, sID)
		if (!joiningState) {
			joiningState = join(cID, sID)
		} 
		val vv = joiningState
		assert vv
		// comspace = getContext(occurrence.subContextID).getSpace(sharedSpaceID)
		var contextTJustJoined = getContext(cID) 
		assert(contextTJustJoined !== null)
		this.comspace = contextTJustJoined.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
			this.sharedSpaceID)		
		this.comspace.registerStrongParticipant(asEventListener)
	}

	on Ping [occurrence.index < this.MAX_ITERATION && isInSpace(this.comspace)] {
		this.comspace.emit(new Pong(occurrence.index)) [
			it.UUID == occurrence.source.UUID
		]
	}

	on Ping [occurrence.index == MAX_ITERATION && isInSpace(comspace)] {
		this.comspace.emit(new Pong(occurrence.index)) [
			it.UUID == occurrence.source.UUID
		]

		if (this.level < this.MAX_ITERATION) {
			typeof(PongAgent).spawnInContextWithID(this.childID, innerContext,
				buildAgentInitializationParameters(
					this.sharedSpaceID.toString,
					this.MAX_ITERATION.toString,
					(this.level + 1).toString)
			)
		} else {
			killMe
		}

	}

	on AgentKilled {
		if (occurrence.isInInnerDefaultSpace) {
			if (!hasMemberAgent) {
				killMe
			}
		}
	}

}
