/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.lifecycle

import io.sarl.lang.core.Capacity
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.Skill
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.units.services.lifecycle.mocks.MyCap
import io.sarl.sre.tests.units.services.lifecycle.mocks.XAbstractCreatorFactoryMock
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestMockito.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
class XAbstractCreatorFactoryTest {

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, null parameter")
	def mergeSkillProviders_0_nullIterable : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		var actual = factory.mergeSkillProviders(null)
		//
		actual.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, empty iterable")
	def mergeSkillProviders_0_emptyIterable : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		var provider = factory.mergeSkillProviders(emptyList)
		//
		provider.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, one iterable with cleared reference")
	def mergeSkillProviders_0_oneIterable_clearReference : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, one iterable")
	def mergeSkillProviders_0_oneIterable : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected0.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, two iterables, first active")
	def mergeSkillProviders_0_twoIterables_firstActive : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected0.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, two iterables, second active")
	def mergeSkillProviders_0_twoIterables_secondActive : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected1.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders without DynamicSkillProvider, two iterables, none active")
	def mergeSkillProviders_0_twoIterables_noneActive : void {
		var factory = new XAbstractCreatorFactoryMock
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var subprovider1 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, null parameter")
	def mergeSkillProviders_1_nullIterable : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var provider = factory.mergeSkillProviders(null)
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, empty iterable")
	def mergeSkillProviders_1_emptyIterable : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var provider = factory.mergeSkillProviders(emptyList)
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, one iterable with cleared reference")
	def mergeSkillProviders_1_oneIterable_clearReference : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, one iterable")
	def mergeSkillProviders_1_oneIterable : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected0.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, two iterables, first active")
	def mergeSkillProviders_1_twoIterables_firstActive : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected0.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, two iterables, second active")
	def mergeSkillProviders_1_twoIterables_secondActive : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected1.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with empty DynamicSkillProvider, two iterables, none active")
	def mergeSkillProviders_1_twoIterables_noneActive : void {
		var orig = DynamicSkillProvider::EMPTY_PROVIDER
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var subprovider1 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		s.assertNull
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, null parameter")
	def mergeSkillProviders_2_nullIterable : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var provider = factory.mergeSkillProviders(null)
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, empty iterable")
	def mergeSkillProviders_2_emptyIterable : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var provider = factory.mergeSkillProviders(emptyList)
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, one iterable with cleared reference")
	def mergeSkillProviders_2_oneIterable_clearReference : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, one iterable")
	def mergeSkillProviders_2_oneIterable : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		var provider = factory.mergeSkillProviders(#[subprovider0])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, two iterables, first active")
	def mergeSkillProviders_2_twoIterables_firstActive : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		val expected0 = typeof(Skill).mock
		var subprovider0 = new Provider(expected0)
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, two iterables, second active")
	def mergeSkillProviders_2_twoIterables_secondActive : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		val expected1 = typeof(Skill).mock
		var subprovider1 = new Provider(expected1)
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	@Test
	@DisplayName("mergeSkillProviders with DynamicSkillProvider, two iterables, none active")
	def mergeSkillProviders_2_twoIterables_noneActive : void {
		val expected = typeof(Skill).mock
		var orig = new Provider(expected)
		var factory = new XAbstractCreatorFactoryMock(orig)
		//
		var subprovider0 = DynamicSkillProvider::EMPTY_PROVIDER
		var subprovider1 = DynamicSkillProvider::EMPTY_PROVIDER
		var provider = factory.mergeSkillProviders(#[subprovider0, subprovider1])
		//
		provider.assertNotNull
		//
		var s = provider.createSkill(typeof(MyCap))
		//
		expected.assertSame(s)
	}

	private static class Provider implements DynamicSkillProvider {

		val ^skill : Skill

		new (^skill : Skill) {
			this.^skill = ^skill
		}
	
		def createSkill(^capacity : Class<? extends Capacity>) : Skill {
			return this.^skill
		}
		
		def isSkillProviding(^capacity : Class<? extends Capacity>) : boolean {
			return true
		}
		
	}

}
