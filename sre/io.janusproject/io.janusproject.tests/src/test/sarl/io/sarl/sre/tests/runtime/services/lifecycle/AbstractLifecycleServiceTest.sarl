/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.services.lifecycle

import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.DestroyKillTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.EventHanlderKillTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.InitializeKillTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.InitializeSpawnKillTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.NoChildInnerContextIsKillableTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.NoChildNoInnerContextIsKillableTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.OneAgentSpawnTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.TaskKillTestAgent
import io.sarl.sre.tests.runtime.services.lifecycle.mocks.ThreeAgentsSpawnTestAgent
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractLifecycleServiceTest {

	protected abstract def runTestCase_prepare
	
	@BeforeEach
	def setUp : void {
		runTestCase_prepare
	}

	@Test
	def spawnAgent_1(extension rc : SreRunContext) {
		typeof(OneAgentSpawnTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(1, results.size)
		assertContains(results, "SPAWNED")
	}

	@Test
	def spawnAgent_3(extension rc : SreRunContext) {
		typeof(ThreeAgentsSpawnTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(3, results.size)
		assertContains(results, "SPAWNED", "SPAWNED", "SPAWNED")
	}

	@Test
	def killAgent_duringInitialize(extension rc : SreRunContext) {
		typeof(InitializeKillTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(1, results.size)
		assertContains(results, "1")
	}

	@Test
	def killAgent_duringInitializeAfterSpawn(extension rc : SreRunContext) {
		typeof(InitializeSpawnKillTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(3, results.size)
		assertContains(results, "1", "2", "SPAWNED")
	}

	@Test
	def killAgent_duringEventHandling(extension rc : SreRunContext) {
		typeof(EventHanlderKillTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(2, results.size)
		assertContains(results, "1", "2")
	}

	@Test
	def killAgent_duringTask(extension rc : SreRunContext) {
		typeof(TaskKillTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(2, results.size)
		assertContains(results, "1", "2")
	}

	@Test
	def killAgent_duringDestroy(extension rc : SreRunContext) {
		typeof(DestroyKillTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(2, results.size)
		assertContains(results, "1", "2")
	}

	@Test
	def isKillableAgent_noChild_noInnerContext(extension rc : SreRunContext) {
		typeof(NoChildNoInnerContextIsKillableTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(2, results.size)
		assertContains(results, "1", "2")
	}

	@Test
	def isKillableAgent_noChild_innerContext(extension rc : SreRunContext) {
		typeof(NoChildInnerContextIsKillableTestAgent).runSre
		var results = allResults
		assertNotNull(results)
		assertEquals(2, results.size)
		assertContains(results, "1", "2")
	}

}
