/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.services.namespace

import io.sarl.sre.services.namespace.FieldAccess
import io.sarl.sre.services.namespace.NamespaceService
import io.sarl.sre.tests.runtime.services.namespace.mocks.ChangeField
import io.sarl.sre.tests.runtime.services.namespace.mocks.NamespaceTestAgent
import io.sarl.sre.tests.runtime.services.namespace.mocks.StopTest
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.testutils.^extension.SreRunContext
import io.sarl.sre.tests.testutils.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import java.util.logging.Level
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.tests.testutils.Constants.*

import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNull

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractNamespaceServiceTest {

	@BeforeEach
	def setUp : void {
		//
	}

	protected def startTestingFramework(extension rc : SreRunContext) : NamespaceService {
		runTestCase_prepare
		var kern = setupTheSreKernel(Level::OFF, false, false)
		var service = kern.getService(typeof(NamespaceService))
		service.assertNotNull
		return service
	}

	@SuppressWarnings("discouraged_reference")
	protected def runTestCase(extension rc : SreRunContext, type : Class<T>) : T with T {
		runTestCase_prepare

		var kern = setupTheSreKernel(Level::OFF, false, false)
		var service = kern.getService(typeof(NamespaceService))
		service.assertNotNull

		val id = bootstrap.startAgent(typeof(NamespaceTestAgent), getAgentInitializationParameters)

		var namedObject = service.findObject("agent:" + id + "#myfield")
		namedObject.assertNotNull

		service.runTestCase_beforeChangeField(namedObject)
		kern.rootContext.defaultSpace.emit(UUID::randomUUID, new ChangeField)
		service.runTestCase_beforeStopTest(namedObject)
		Thread::sleep(1.seconds)
		kern.rootContext.defaultSpace.emit(UUID::randomUUID, new StopTest)
		service.runTestCase_afterStopTest(namedObject)

		waitForTheKernel(NO_TIMEOUT)

		return type.cast(namedObject)
	}

	@Test
	def accessAgentField(extension rc : SreRunContext) : void {
		var field = rc.runTestCase(typeof(FieldAccess))
		
		"myfield".assertEquals(field.field.name)

		"int".assertEquals(field.field.type.simpleName)

		24.assertEquals(field.get as Integer)
	}

	@Test
	def accessUnknownAgent(extension rc : SreRunContext) : void {
		var service = rc.startTestingFramework

		val id = UUID::randomUUID

		var namedObject = service.findObject("agent:" + id + "#myfield")
		namedObject.assertNull
	}

	protected abstract def runTestCase_prepare

	protected abstract def runTestCase_beforeChangeField(service : NamespaceService, namedObject : Object)

	protected abstract def runTestCase_beforeStopTest(service : NamespaceService, namedObject : Object)

	protected abstract def runTestCase_afterStopTest(service : NamespaceService, namedObject : Object)

}
