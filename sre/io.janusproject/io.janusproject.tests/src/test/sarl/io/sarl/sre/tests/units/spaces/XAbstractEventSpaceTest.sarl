/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces

import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.spaces.AbstractEventSpace
import io.sarl.sre.spaces.Participant
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.units.spaces.mocks.XAbstractEventSpaceMock
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor
import org.mockito.InjectMocks
import org.mockito.Mock

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension io.sarl.tests.api.tools.TestReflections.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.*
import static extension org.mockito.MockitoAnnotations.initMocks

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AbstractEventSpace test")
class XAbstractEventSpaceTest {

	@Nullable
	var agentId : UUID

	@Nullable
	var agentId2 : UUID

	@Nullable
	var spaceId : SpaceID

	@Nullable
	var address : Address

	@Nullable
	var listener1 : InformedEventListener

	@Nullable
	var listener2 : InformedEventListener 

	@Mock
	var executor : ExecutorService 

	@Nullable
	var participants : ConcurrentHashMap<UUID, Participant> 

	@InjectMocks
	var ^space : AbstractEventSpace 

	@BeforeEach
	def setUp : void {
		this.participants = new ConcurrentHashMap

		this.agentId = UUID::randomUUID

		this.agentId2 = UUID::randomUUID

		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))

		this.address = new Address(this.spaceId, this.agentId)

		this.^space = new XAbstractEventSpaceMock(this.participants, this.spaceId)

		this.listener1 = typeof(InformedEventListener).mock
		when(this.listener1.ID).thenReturn(this.agentId)

		this.listener2 = typeof(InformedEventListener).mock
		when(this.listener2.ID).thenReturn(this.agentId2)

		initMocks

		doAnswer [
			var r = it.getArguments().get(0) as Runnable
			r.run
			return null
		].when(this.executor).executeAsap(typeof(Runnable).any)
	}

	private def register : void {
		var participant1 = typeof(Participant).mock
		when(participant1.address).thenReturn(this.address)
		when(participant1.participant).thenReturn(this.listener1)
		var participant2 = typeof(Participant).mock
		when(participant2.address).thenReturn(new Address(this.spaceId, this.agentId2))
		when(participant2.participant).thenReturn(this.listener2)
		this.participants.put(this.agentId, participant1)
		this.participants.put(this.agentId2, participant2)
	}

	@Test
	def getAddressUUID {
		this.^space.getAddress(this.listener1.ID).assertNull
		register
		this.address.assertSame(this.^space.getAddress(this.listener1.ID))
	}

	private def emitLocally(^event : Event, scope : Scope<Address>) {
		this.^space.class.invokeProc(this.^space, "emitLocally",
			#[typeof(Event), typeof(Scope)], ^event, scope)
	}

	@Test
	def emitLocally_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally(null)
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally(null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emitLocally_allParticipants {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [true]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emitLocally_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [this.address == it]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		^event.emitLocally [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
		verifyNoMoreInteractions(this.listener2)
	}

	@Test
	def emit_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)

		this.listener2.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
	}

	@Test
	def emit_allParticipants {
		var ^event = mock(typeof(Event))
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emit_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]
		verifyNoMoreInteractions(this.listener1)
		verifyNoMoreInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener1.verify.receiveEvent(argument.capture)
		^event.assertSame(argument.value)
		verifyNoMoreInteractions(this.listener2)
	}

}
