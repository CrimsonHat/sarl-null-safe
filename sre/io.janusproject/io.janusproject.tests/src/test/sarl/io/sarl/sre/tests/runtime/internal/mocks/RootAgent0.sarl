/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.internal.mocks

import io.sarl.core.AgentSpawned
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.MemberJoined
import io.sarl.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill

import static extension io.sarl.tests.api.tools.TestUtils.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent RootAgent0 {

	uses Schedules, Lifecycle, InnerContextAccess, DefaultContextInteractions

	uses TestingCapacity

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		in(500) [
			typeof(ChildAgent0).spawnInContext(getInnerContext, buildAgentInitializationParameters)
		]
	}

	on AgentSpawned [typeof(ChildAgent0).name == occurrence.agentType] {
		addResult("ROOT: spawned " + occurrence.agentType.simpleTypeName)
		typeof(Child2Agent0).spawn(buildAgentInitializationParameters(getInnerContext))
	}

	on MemberJoined {
		var msg : String
		if (occurrence.inInnerDefaultSpace) {
			msg = "inner"
		} else if (occurrence.inDefaultSpace) {
			msg = "default"
		} else {
			msg = "other"
		}
		addResult("ROOT: joined " + occurrence.agentType.simpleTypeName + " in " + msg + " space")
	}

}
