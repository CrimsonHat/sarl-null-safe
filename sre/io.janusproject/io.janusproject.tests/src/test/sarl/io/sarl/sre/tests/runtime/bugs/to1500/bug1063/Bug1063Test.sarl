/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1500.bug1063

import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.sre.tests.runtime.bugs.to1500.bug1063.mocks.BootAgent
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.List
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*

/** Testing class for issue: Bug on Context.getOrCreateSpaceWithSpec in concurrent applications
 * (but without the network, local context).
 *
 * <p>https://github.com/sarl/sarl/issues/1063
 *
 * @author $Author: sgalland$
 * @version $Name$ $Revision$ $Date$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see "https://github.com/sarl/sarl/issues/1063"
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: Bug #1063")
@Tag("sre-run")
@Tag("janus")
class Bug1063Test {

	def extractIdFromResults(results : List<Object>, prefix : String) : String {
		for (res : results) {
			val s = res.toString
			if (s.startsWith(prefix)) {
				val v = s.substring(prefix.length)
				if (v !== null) {
					return v
				}
				fail("Illegal UUID value for prefix: " + prefix)
			}
		}
		fail("Cannot find the value for prefix: " + prefix)
	}

	@RepeatedTest(10)
	@DisplayName("run Ping-Pong 5 times")
	@SuppressWarnings("potential_inefficient_value_conversion")
	def run(extension rc : SreRunContext) : void {
		typeof(BootAgent).runSre(NO_TIMEOUT)

		val id1 = results.extractIdFromResults("ID1 = ") as UUID
		val id2 = results.extractIdFromResults("ID2 = ") as UUID
		val sid = results.extractIdFromResults("SID = ") as UUID

		val r1 = getResults(id1)
		val r2 = getResults(id2)

		val s1 = r1.extractIdFromResults("SID = ") as UUID
		val s2 = r2.extractIdFromResults("SID = ") as UUID

		sid.assertEquals(s1) [ "Unexpected space identifier is Ping agent"]
		sid.assertEquals(s2) [ "Unexpected space identifier is Pong agent"]

		val o1 = r1.extractIdFromResults("SPACE = ")
		val o2 = r2.extractIdFromResults("SPACE = ")

		o1.assertEquals(o2) [ "Space objects are not the same"]
	}

}
