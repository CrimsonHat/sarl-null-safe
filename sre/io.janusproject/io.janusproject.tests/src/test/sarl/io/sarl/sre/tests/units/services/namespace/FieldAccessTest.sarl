/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.namespace

import io.sarl.sre.naming.SarlName
import io.sarl.sre.services.namespace.FieldAccess
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.lang.reflect.Field
import javax.annotation.Nullable
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertSame

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: FieldAccess test")
@Tag("unit")
class FieldAccessTest {

	private static class ObjectMock {
		public var fld : int = 34
	}

	@Nullable
	var field : Field

	@Nullable
	var objectMock : ObjectMock

	@Nullable
	var accessor : FieldAccess

	@Nullable
	var nameMock : SarlName

	
	@BeforeEach
	def setUp : void {
		this.nameMock = typeof(SarlName).mock
		this.field = typeof(ObjectMock).getDeclaredField("fld")
		this.objectMock = new ObjectMock
		this.accessor = new FieldAccess(this.nameMock, this.field, this.objectMock)
	}

	@Test
	def getName {
		this.nameMock.assertSame(this.accessor.name)
	}

	@Test
	def getField {
		this.field.assertSame(this.accessor.field)
	}

	@Test
	def getInstance {
		this.objectMock.assertSame(this.accessor.instance)
	}

	@Test
	def get {
		34.assertEquals(this.accessor.get)
	}

	@Test
	def set_success {
		var old = this.accessor.set(128)
		34.assertEquals(old)
		128.assertEquals(this.accessor.get)
		128.assertEquals(this.objectMock.fld)
	}

	@Test
	def set_invalidType : void {
		typeof(IllegalArgumentException).assertException [
			this.accessor.set("abc")
		]
	}

	@Test
	def toStringTest {
		"fld".assertEquals(this.accessor.toString)
	}

}
