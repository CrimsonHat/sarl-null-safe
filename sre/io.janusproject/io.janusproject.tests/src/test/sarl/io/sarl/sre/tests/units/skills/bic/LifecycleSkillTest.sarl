/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.skills.bic.LifecycleSkill
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent2
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent3
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.tests.api.tools.TestReflections.*
import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: LifecycleSkill test")
@Tag("unit")
class LifecycleSkillTest {

	@Nullable
	var service : LifecycleService
	
	@Nullable
	var spawnerID : UUID

	@Nullable
	var context : Context

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : LifecycleSkill

	@BeforeEach
	def setUp : void {
		this.spawnerID = UUID::randomUUID
		this.service = typeof(LifecycleService).mock
		this.context = typeof(Context).mock
		when(this.context.ID).thenReturn(UUID::randomUUID)
		this.^agent = new MyAgent3(this.context.ID, this.spawnerID).spy
		AgentLife::getLife(^agent).setDefaultContext(this.context, typeof(Address).mock)
		this.^skill = new LifecycleSkill(this.service)
		invokeProc(this.^skill.class, this.^skill, "setOwner", #[typeof(Agent)], this.^agent)
	}

	private def forceAlive {
		// Force being alive
		AgentLife.getLife(this.^agent).state = AgentState::ALIVE
	}

	@Test
	def spawn_notAlive : void{
		this.^skill.spawn(typeof(MyAgent2), 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	def spawn_alive {
		forceAlive
		
		this.^skill.spawn(typeof(MyAgent2), 1, "value")
		
		var argument0 = ArgumentCaptor::forClass(typeof(int))
		var argument1 = ArgumentCaptor::forClass(typeof(UUID))
		var argument2 = ArgumentCaptor::forClass(typeof(Context))
		var argument3 = ArgumentCaptor::forClass(typeof(UUID))
		var argument4 = ArgumentCaptor::forClass(typeof(Class))
		var argument6 = ArgumentCaptor::forClass(typeof(Object))
		this.service.verify(1.times).spawnAgent(
			argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, any, argument6.capture)
		assertEquals(1, argument0.value)
		assertSame(this.spawnerID, argument1.value)
		assertSame(this.context, argument2.value)
		assertNull(argument3.value)
		assertEquals(typeof(MyAgent2), argument4.value)
		assertArrayEquals(#[1, "value"], argument6.allValues.toArray)
	}

	@Test
	def spawnInteger_notAlive {
		this.^skill.spawn(3, typeof(MyAgent2), 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	def spawnInteger_alive {
		forceAlive
		
		this.^skill.spawn(3, typeof(MyAgent2), 1, "value")
		
		var argument0 = ArgumentCaptor::forClass(typeof(int))
		var argument1 = ArgumentCaptor::forClass(typeof(UUID))
		var argument2 = ArgumentCaptor::forClass(typeof(Context))
		var argument3 = ArgumentCaptor::forClass(typeof(UUID))
		var argument4 = ArgumentCaptor::forClass(typeof(Class))
		var argument6 = ArgumentCaptor::forClass(typeof(Object))
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, any, argument6.capture)
		assertEquals(3, argument0.value)
		assertSame(this.spawnerID, argument1.value)
		assertSame(this.context, argument2.value)
		assertNull(argument3.value)
		assertEquals(typeof(MyAgent2), argument4.value)
		assertArrayEquals(#[1, "value"], argument6.allValues.toArray)
	}

	@Test
	def spawnInContext_notAlive : void {
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContext(typeof(MyAgent2), otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	def spawnInContext_alive {
		var otherContext = typeof(Context).mock

		forceAlive
		
		this.^skill.spawnInContext(typeof(MyAgent2), otherContext, 1, "value")
		
		var argument0 = ArgumentCaptor::forClass(typeof(int))
		var argument1 = ArgumentCaptor::forClass(typeof(UUID))
		var argument2 = ArgumentCaptor::forClass(typeof(Context))
		var argument3 = ArgumentCaptor::forClass(typeof(UUID))
		var argument4 = ArgumentCaptor::forClass(typeof(Class))
		var argument6 = ArgumentCaptor::forClass(typeof(Object))
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, any, argument6.capture)
		assertEquals(1, argument0.value)
		assertSame(this.spawnerID, argument1.value)
		assertSame(otherContext, argument2.value)
		assertNull(argument3.value)
		assertEquals(typeof(MyAgent2), argument4.value)
		assertArrayEquals(#[1, "value"], argument6.allValues.toArray)
	}

	@Test
	def spawnInContextInteger_notAlive : void {
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContext(3, typeof(MyAgent2), otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	def spawnInContextInteger_alive {
		var otherContext = typeof(Context).mock

		forceAlive

		this.^skill.spawnInContext(3, typeof(MyAgent2), otherContext, 1, "value")
		
		var argument0 = ArgumentCaptor::forClass(typeof(int))
		var argument1 = ArgumentCaptor::forClass(typeof(UUID))
		var argument2 = ArgumentCaptor::forClass(typeof(Context))
		var argument3 = ArgumentCaptor::forClass(typeof(UUID))
		var argument4 = ArgumentCaptor::forClass(typeof(Class))
		var argument6 = ArgumentCaptor::forClass(typeof(Object))
		this.service.verify(1.times).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, any, argument6.capture)
		assertEquals(3, argument0.value)
		assertSame(this.spawnerID, argument1.value)
		assertSame(otherContext, argument2.value)
		assertNull(argument3.value)
		assertEquals(typeof(MyAgent2), argument4.value)
		assertArrayEquals(#[1, "value"], argument6.allValues.toArray)
	}

	@Test
	def spawnInContextWithID_notAlive : void {
		var agentID = UUID::randomUUID
		var otherContext = typeof(Context).mock
		this.^skill.spawnInContextWithID(typeof(MyAgent2), agentID, otherContext, 1, "value")
		verifyNoMoreInteractions(this.service)
	}

	@Test
	def spawnInContextWithID_alive {
		var agentID = UUID::randomUUID
		var otherContext = typeof(Context).mock

		forceAlive

		this.^skill.spawnInContextWithID(typeof(MyAgent2), agentID, otherContext, 1, "value")
		
		var argument0 = ArgumentCaptor::forClass(typeof(int))
		var argument1 = ArgumentCaptor::forClass(typeof(UUID))
		var argument2 = ArgumentCaptor::forClass(typeof(Context))
		var argument3 = ArgumentCaptor::forClass(typeof(UUID))
		var argument4 = ArgumentCaptor::forClass(typeof(Class))
		var argument6 = ArgumentCaptor::forClass(typeof(Object))
		verify(this.service, times(1)).spawnAgent(argument0.capture.intValue, argument1.capture, argument2.capture,
				argument3.capture, argument4.capture, any, argument6.capture)
		assertEquals(1, argument0.value)
		assertSame(this.spawnerID, argument1.value)
		assertSame(otherContext, argument2.value)
		assertSame(agentID, argument3.value)
		assertEquals(typeof(MyAgent2), argument4.value)
		assertArrayEquals(#[1, "value"], argument6.allValues.toArray)
	}

}
