/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.services.probing

import io.sarl.sre.services.probing.Probe
import io.sarl.sre.services.probing.ProbeService
import io.sarl.sre.tests.runtime.services.probing.mocks.ChangeField
import io.sarl.sre.tests.runtime.services.probing.mocks.ProbedAgent
import io.sarl.sre.tests.runtime.services.probing.mocks.StopTest
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.testutils.^extension.SreRunContext
import io.sarl.sre.tests.testutils.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.List
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.tests.testutils.Constants.*

import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertSame

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
abstract class AbstractProbeServiceTest {

	var changedProbes : List<Pair<Probe<?>, Object>>
	var releasedProbes : List<Probe<?>>

	@BeforeEach
	def setUp : void {
	}

	@SuppressWarnings("discouraged_reference")
	protected def runTestCase(extension rc : SreRunContext) : Probe<Integer> {
		runTestCase_prepare

		var kern = setupTheSreKernel(null, null)
		var service = kern.getService(typeof(ProbeService))
		service.assertNotNull

		this.changedProbes = newArrayList
		this.releasedProbes = newArrayList

		val id = bootstrap.startAgent(typeof(ProbedAgent), getAgentInitializationParameters)

		var probe = service.probe("agent:" + id + "#myfield", typeof(Integer))
		probe.assertNotNull

		probe.addProbeListener [
			synchronized (this.changedProbes) {
				this.changedProbes += Pair::of(it, it.value)
			}
		]

		probe.addProbeReleaseListener [
			synchronized (this.releasedProbes) {
				this.releasedProbes += it
			}
		]

		service.runTestCase_beforeChangeField(probe)
		kern.rootContext.defaultSpace.emit(UUID::randomUUID, new ChangeField)
		service.runTestCase_beforeStopTest(probe)
		Thread::sleep(1.seconds)
		kern.rootContext.defaultSpace.emit(UUID::randomUUID, new StopTest)
		service.runTestCase_afterStopTest(probe)

		waitForTheKernel(NO_TIMEOUT)

		return probe
	}

	@Test
	def probeAgentField(extension rc : SreRunContext) {
		var probe = rc.runTestCase
		
		1.assertEquals(changedProbes.size)

		probe.assertSame(changedProbes.get(0).key)
		24.assertEquals(changedProbes.get(0).value)

		24.assertEquals(probe.value)

		1.assertEquals(releasedProbes.size)
		probe.assertSame(releasedProbes.get(0))
	}

	protected abstract def runTestCase_prepare

	protected abstract def runTestCase_beforeChangeField(service : ProbeService, probe : Probe<Integer>)

	protected abstract def runTestCase_beforeStopTest(service : ProbeService, probe : Probe<Integer>)

	protected abstract def runTestCase_afterStopTest(service : ProbeService, probe : Probe<Integer>)

}
