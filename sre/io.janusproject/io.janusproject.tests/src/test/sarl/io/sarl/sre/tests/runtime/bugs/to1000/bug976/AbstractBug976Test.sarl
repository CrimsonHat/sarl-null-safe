/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.tests.runtime.bugs.to1000.bug976

import io.sarl.lang.core.Agent
import io.sarl.sre.services.lifecycle.SpawnDisabledException
import io.sarl.sre.test.framework.context.LogTrackingMode
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.exception.SreTimeoutException
import java.util.UUID
import java.util.logging.Level
import java.util.logging.LogRecord

import static io.sarl.sre.test.framework.Constants.*
import static org.junit.jupiter.api.Assertions.*
import static extension io.sarl.tests.api.tools.TestAssertions.*

/** Tests for issue #976: UnimplementedCapacityException when getting logging capacity.
 *
 * <p>See: https://github.com/sarl/sarl/issues/976
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see "https://github.com/sarl/sarl/issues/976"
 */
abstract class AbstractBug976Test {

	protected def assertNoError(extension rc : SreRunContext, failOnExistingContent : boolean) {
		val results = getAllResults
		if (!results.empty) {
			for (r : results) {
				if (r instanceof SpawnDisabledException) {
					// Ignore this error because the boot agent may want to spawn an agent when the
					// testing framework stops the test.
				} else if (r instanceof Throwable) {
					fail("Error when running an agent behavior", r)
				} else if (r instanceof LogRecord) {
					if (r.level === Level::SEVERE) {
						val th = r.thrown
						if (th !== null) {
							fail(r.message, th)
						} else {
							fail(r.message)
						}
					}
				} else if (failOnExistingContent) {
					fail("Unexpected result: " + r)
				}
			}
		}
	}

	protected def run(extension rc : SreRunContext, agentType : Class<? extends Agent>, nb : int) : void {
		var kern = setupTheSreKernel(Level::SEVERE, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(EXTRA_TIMEOUT)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb)
	}

	protected def runDefaultSpace(extension rc : SreRunContext, agentType : Class<? extends Agent>, nb : int) : void {
		var kern = setupTheSreKernel(Level::SEVERE, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(EXTRA_TIMEOUT)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb, "strong-participants-"+(nb+1), "weak-participants-"+1)
	}

	protected def runInnerSpace(extension rc : SreRunContext, agentType : Class<? extends Agent>, nb : int) : void {
		var kern = setupTheSreKernel(Level::SEVERE, LogTrackingMode::ADD_TO_AGENT_RESULTS)

		val id0 = UUID::randomUUID
		kern.startAgentWithID(agentType, id0, buildAgentInitializationParameters(nb))

		try {
			waitForTheKernel(EXTRA_TIMEOUT)
		} catch (ex : SreTimeoutException) {
			// Ignore this exception because the BootScalableAgent could not be able
			// to spawn the huge number of agents into the given time.
			// The speed of the spawning is not the purpose of this test. Only the
			// fact that the UnimplementedCapacityException is thrown is under interest.
		}
		
		// No error should be logged
		rc.assertNoError(false)
		
		val r = allResults
		r.assertContains("all-spawn", "nb-spawn-" + nb, "strong-participants-"+(nb+1), "weak-participants-"+1)
	}

}
