/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.internal.eventguard

import io.sarl.sre.internal.eventguard.BehaviorGuardEvaluator
import io.sarl.sre.tests.units.internal.eventguard.mocks.TestAgent1
import io.sarl.sre.tests.units.internal.eventguard.mocks.TestEvent0
import java.util.Collection
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.*

/** 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@DisplayName("unit: BehaviorGuardEvaluator test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class BehaviorGuardEvaluatorTest {

	@Test
	def evaluateGuard : void {
		val method = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target = typeof(TestAgent1).mock
		val evaluator = new BehaviorGuardEvaluator(target, method)

		val ^event = typeof(TestEvent0).mock
		val runnables = newArrayList
		evaluator.evaluateGuard(^event, runnables)

		1.assertEquals(runnables.size)
	}

	@Test
	def getTarget : void {
		val method = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target = typeof(TestAgent1).mock
		val evaluator = new BehaviorGuardEvaluator(target, method)
		target.assertSame(evaluator.target)
	}

	@Test
	def getMethod : void {
		val method = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0),
			typeof(Collection))
		val target = typeof(TestAgent1).mock
		val evaluator = new BehaviorGuardEvaluator(target, method)
		method.assertSame(evaluator.method)
	}
	
	@Test
	def testHashCode : void {
		val method1 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new BehaviorGuardEvaluator(target1, method1)
		val evaluator1b = new BehaviorGuardEvaluator(target1, method1)

		evaluator1a.hashCode.assertEquals(evaluator1a.hashCode)
		evaluator1a.hashCode.assertEquals(evaluator1b.hashCode)

		val method2 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new BehaviorGuardEvaluator(target2, method2)

		evaluator1a.hashCode.assertNotEquals(evaluator2.hashCode)
	}

	@Test
	def testEquals : void {
		val method1 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new BehaviorGuardEvaluator(target1, method1)
		val evaluator1b = new BehaviorGuardEvaluator(target1, method1)

		evaluator1a.equals(null).assertFalse
		evaluator1a.equals(evaluator1a).assertTrue
		evaluator1a.equals(evaluator1b).assertTrue

		val method2 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new BehaviorGuardEvaluator(target2, method2)

		evaluator1a.equals(evaluator2).assertFalse
	}

	@Test
	def compareTo : void {
		val method1 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target1 = typeof(TestAgent1).mock
		val evaluator1a = new BehaviorGuardEvaluator(target1, method1)
		val evaluator1b = new BehaviorGuardEvaluator(target1, method1)

		evaluator1a.compareTo(null).assertStrictlyPositive
		evaluator1a.compareTo(evaluator1a).assertZero
		evaluator1a.compareTo(evaluator1b).assertZero

		val method2 = typeof(TestAgent1).getDeclaredMethod("$guardEvaluator$TestEvent0", typeof(TestEvent0), typeof(Collection))
		val target2 = typeof(TestAgent1).mock
		val evaluator2 = new BehaviorGuardEvaluator(target2, method2)

		evaluator1a.compareTo(evaluator2).assertNotZero

		val id1 = System::identityHashCode(target1)
		val id2 = System::identityHashCode(target2)

		if (id1 <= id2) {
			evaluator1a.compareTo(evaluator2).assertStrictlyNegative
		} else {
			evaluator1a.compareTo(evaluator2).assertStrictlyPositive
		}
	}

}
