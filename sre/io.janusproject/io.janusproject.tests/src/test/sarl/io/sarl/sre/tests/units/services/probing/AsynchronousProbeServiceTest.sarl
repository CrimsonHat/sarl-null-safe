/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.probing

import io.sarl.api.naming.name.ContextName
import io.sarl.api.naming.name.SarlName
import io.sarl.api.naming.namespace.FieldAccess
import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.parser.UriBasedNameParser
import io.sarl.api.probing.Probe
import io.sarl.sre.internal.SequenceListenerNotifier
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.probing.AsynchronousProbeService
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.net.URI
import java.util.UUID
import javax.annotation.Nullable
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.junit.jupiter.api.Assertions.assertFalse
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertSame
import static extension org.junit.jupiter.api.Assertions.assertTrue
import static extension org.mockito.ArgumentCaptor.forClass
import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify
import io.sarl.api.naming.name.SpaceName

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AsynchronousProbeService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class AsynchronousProbeServiceTest {

	@Nullable
	var fieldAccess : FieldAccess

	@Nullable
	var namespaceService : NamespaceService

	@Nullable
	var nameParser : UriBasedNameParser

	@Nullable
	var executorService : ExecutorService

	@Nullable
	var service : AsynchronousProbeService

	@Nullable
	var uri0 : URI

	@Nullable
	var name0 : ContextName

	@Nullable
	var nameObject : SarlName

	@BeforeEach
	def setUp : void {
		this.nameObject = typeof(SarlName).mock
		when(this.nameObject.scheme).thenReturn(SpaceName::SCHEME)
		this.fieldAccess = typeof(FieldAccess).mock
		when(this.fieldAccess.name).thenReturn(this.nameObject)
		this.namespaceService = typeof(NamespaceService).mock
		when(this.namespaceService.findObject(typeof(SarlName).any)).thenReturn(this.fieldAccess)
		this.nameParser = typeof(UriBasedNameParser).mock
		when(this.nameParser.normalize(any(typeof(URI)))).thenAnswer[it.getArgument(0)]
		when(this.nameParser.decode(any(typeof(URI)))).thenAnswer [
			if (it.getArgument(0) === this.uri0) {
				return this.name0
			} else {
				var n = typeof(ContextName).mock
				when(n.toURI).thenReturn(it.getArgument(0) as URI)
				return n
			}
		]
		when(this.nameParser.decode(any(typeof(String)))).thenAnswer[URI::create(it.getArgument(0))]
		this.executorService = typeof(ExecutorService).mock
		val coll = new SmartListenerCollection(new SequenceListenerNotifier)		
		this.service = new AsynchronousProbeService(this.executorService, this.namespaceService, this.nameParser,
			[coll])
		this.service = this.service.spy
		this.name0 = typeof(ContextName).mock
		when(this.name0.scheme).thenReturn(ContextName::SCHEME)
		this.uri0 = URI::create("context:myid")
		when(this.name0.toURI).thenReturn(this.uri0)
	}

	@Test
	def probe_SarlNameClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe(this.name0, typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:myid"))
		var probe2 = this.service.probe(name1, typeof(Float), UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}

	@Test
	def probe_UriClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe(this.uri0, typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe(this.uri0, typeof(Integer), UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var probe2 = this.service.probe(URI::create("context:myid"), typeof(Float), UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}

	@Test
	def probe_StringClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe("context:myid", typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe("context:myid", typeof(Integer), UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var probe2 = this.service.probe("context:myid", typeof(Float), UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}
	
	@Test
	def getProbes_00 : void {
		this.service.probes.iterator.hasNext.assertFalse
	}

	@Test
	def getProbes_01 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var iterator = this.service.probes.iterator
		iterator.hasNext.assertTrue
		probe0.assertSame(iterator.next)
		iterator.hasNext.assertFalse
	}

	@Test
	def getProbes_02 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:myid1"))
		var probe1 = this.service.probe(name1, typeof(Integer), UUID::randomUUID.toString)
		var collection = this.service.probes
		assertContainsCollection(collection, #[probe0, probe1])
	}

	@Test
	def getProbes_03 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:myid1"))
		var probe1 = this.service.probe(name1, typeof(Integer), UUID::randomUUID.toString)
		var name2 = typeof(ContextName).mock
		when(name2.toURI).thenReturn(URI::create("context:myid2"))
		var probe2 = this.service.probe(name2, typeof(String), UUID::randomUUID.toString)
		var collection = this.service.probes
		assertContainsCollection(collection, #[probe0, probe1, probe2])
	}

	@Test
	def releaseAllProbes : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:myid2"))
		var probe1 = this.service.probe(name1, typeof(Object), UUID::randomUUID.toString)
		probe1.assertNotNull

		this.service.releaseAllProbes
		
		probe0.active.assertFalse
		probe1.active.assertFalse

		var capture = typeof(Probe).forClass
		this.service.verify(2.times).onProbeReleasedProbe(capture.capture)

		this.service.probes.iterator.hasNext.assertFalse
	}

	@Test
	def sync : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:myid2"))
		var probe1 = this.service.probe(name1, typeof(Object), UUID::randomUUID.toString)
		probe1.assertNotNull

		probe0.active.assertTrue
		probe1.active.assertTrue
		probe0.invalid.assertFalse
		probe1.invalid.assertFalse

		this.service.sync

		var collection = this.service.probes
		assertContainsCollection(collection, #[probe0, probe1])

		probe0.active.assertTrue
		probe1.active.assertTrue
		probe0.invalid.assertFalse
		probe1.invalid.assertFalse
	}

	@Test
	def onProbeReleasedProbe : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull

		this.service.onProbeReleasedProbe(probe0)

		this.service.probes.iterator.hasNext.assertFalse
	}

}
