/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.logging.jul

import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.LoggingConfig
import io.sarl.sre.boot.configs.subconfigs.ServicesConfig
import io.sarl.sre.services.logging.jul.JulLoggerCreator
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Provider
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.junit.jupiter.api.Assertions.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.times

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: JulLoggerCreator test")
@Tag("unit")
@Tag("janus")
class JulLoggerCreatorTest {

	@Nullable
	var loggerProvider : Provider<Logger>

	@Nullable
	var logger : Logger

	@Nullable
	var configProvider : Provider<SreConfig>

	@Nullable
	var config : SreConfig
	
	@BeforeEach
	def setUp : void {
		this.loggerProvider = typeof(Provider).mock
		this.logger = typeof(Logger).mock
		when(this.loggerProvider.get).thenReturn(this.logger)

		this.configProvider = typeof(Provider).mock
		this.config = typeof(SreConfig).mock
		when(this.configProvider.get).thenReturn(this.config)

		var servicesConfig = typeof(ServicesConfig).mock
		when(this.config.services).thenReturn(servicesConfig)

		var loggingConfig = typeof(LoggingConfig).mock
		when(loggingConfig.platformMessageFormat).thenReturn("X")
		when(servicesConfig.logging).thenReturn(loggingConfig)
	}

	@Test
	def createPlatformLogger {
		var expectedLevel = Level::ALL
		var creator = new JulLoggerCreator(Level::CONFIG, this.loggerProvider, this.configProvider)
		var logger = creator.createPlatformLogger
		assertSame(this.logger, logger)
		var argument0 = ArgumentCaptor::forClass(typeof(Level))
		verify(logger, 1.times).level = argument0.capture
		assertEquals(expectedLevel, argument0.value)
	}

	@Test
	def createAgentLogger {
		var expectedLevel = Level::CONFIG
		var creator = new JulLoggerCreator(Level::CONFIG, this.loggerProvider, this.configProvider)
		var parent = creator.createPlatformLogger
		var name = UUID::randomUUID.toString
		var logger = creator.createModuleLogger(name, parent)
		assertNotSame(this.logger, logger)
		assertEquals(expectedLevel, logger.level)
	}

}
