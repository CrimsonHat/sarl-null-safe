/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.internal

import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.sre.tests.runtime.internal.mocks.Bye
import io.sarl.sre.tests.runtime.internal.mocks.Child2Agent0
import io.sarl.sre.tests.runtime.internal.mocks.ChildAgent0
import io.sarl.sre.tests.runtime.internal.mocks.RootAgent0
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension io.sarl.tests.api.tools.TestAssertions.*
import io.sarl.sre.services.probing.ProbeService
import io.sarl.lang.core.AgentContext
import static extension org.junit.jupiter.api.Assertions.*
import io.sarl.sre.services.namespace.NamespaceService
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SREutils
import io.sarl.core.InnerContextAccess
import io.sarl.lang.annotation.PrivateAPI

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on MemberJoined test")
@Tag("run")
class OnMemberJoinedTest {

	//@RepeatedTest(5)
	@Test
	@DisplayName("run")
	@PrivateAPI(isCallerOnly = true)
	def run(extension rc : SreRunContext) {
		var kern = setupTheSreKernel(null, null)
		
		val id0 = UUID::randomUUID
		waitForAgentSpawned(id0) [
			kern.startAgentWithID(typeof(RootAgent0), id0, agentInitializationParameters)
		]

		val id1 = UUID::randomUUID
		waitForAgentSpawned(id1) [
			kern.startAgentWithID(typeof(ChildAgent0), id1, agentInitializationParameters)
		]
		
		val names = kern.getService(typeof(NamespaceService))
		val ag = names.findObject("agent:" + id0, typeof(Agent))
		ag.assertNotNull
		var access = SREutils::getInternalSkill(ag, typeof(InnerContextAccess))
		access.assertNotNull
		var ctx = access.innerContext
		ctx.assertNotNull

		val id2 = UUID::randomUUID
		waitForAgentSpawned(id2) [
			kern.startAgentWithID(typeof(Child2Agent0), id2, buildAgentInitializationParameters(ctx))
		]

		rootContext.defaultSpace.emit(UUID::randomUUID, new Bye)
		
		waitForTheKernel(STANDARD_TIMEOUT)

		allResults.assertContains(
			"ROOT: spawned ChildAgent0",
			"ROOT: joined Child2Agent0 in default space",
			"ROOT: joined ChildAgent0 in inner space",
			"ROOT: joined Child2Agent in inner space",
			"CHILD1: joined Child2Agent0")
	}

}
