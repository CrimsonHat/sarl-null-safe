/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.spaces

import io.sarl.lang.core.Address
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.sre.test.framework.^extension.SreRunExtension
import io.sarl.sre.tests.runtime.spaces.mocks.SourceAgent
import io.sarl.sre.tests.runtime.spaces.mocks.SourceAgent2
import io.sarl.sre.tests.runtime.spaces.mocks.TargetAgent
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.test.framework.Constants.*

import static extension org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Disabled

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: event routing test")
@Tag("run")
class EventRoutingTest {

	@Test
	def unchangedEventSource_inspace(extension rc : SreRunContext) {
		val kern = typeof(TargetAgent).setupTheSreKernel(null, null)
		kern.startAgent(typeof(SourceAgent), agentInitializationParameters)
		waitForTheKernel(STANDARD_TIMEOUT)
		
		var adr = getFirstResultOfType(typeof(Address))
		var id = getFirstResultOfType(typeof(UUID))
		adr.assertNotNull
		id.assertNotNull
		id.assertEquals(adr.UUID)
	}

	@Test
	def unchangedEventSources_inspace(extension rc : SreRunContext) {
		val kern = setupTheSreKernel(null, null)
		
		val ag1 = UUID::randomUUID
		kern.startAgentWithID(typeof(TargetAgent), ag1, agentInitializationParameters)

		val ag2 = UUID::randomUUID
		kern.startAgentWithID(typeof(TargetAgent), ag2, agentInitializationParameters)

		kern.startAgent(typeof(SourceAgent), agentInitializationParameters)
		waitForTheKernel(STANDARD_TIMEOUT)

		var adr1 = getResult(ag1, typeof(Address), 0)
		var id1 = getResult(ag1, typeof(UUID), 1)
		adr1.assertNotNull
		id1.assertNotNull
		id1.assertEquals(adr1.UUID)

		var adr2 = getResult(ag2, typeof(Address), 0)
		var id2 = getResult(ag2, typeof(UUID), 1)
		adr2.assertNotNull
		id2.assertNotNull
		id2.assertEquals(adr2.UUID)

		adr1.UUID.assertEquals(adr2.UUID)
		id1.assertEquals(id1)
	}

	@Test
	def unchangedEventSource_innercontext(extension rc : SreRunContext) {
		typeof(SourceAgent2).runSre
		
		var innerAgent = typeof(UUID).getResult(0)
		innerAgent.assertNotNull
		
		var adr = innerAgent.getResult(typeof(Address), 0)
		var id = innerAgent.getResult(typeof(UUID), 1)
		adr.assertNotNull
		id.assertNotNull
		id.assertEquals(adr.UUID)
		innerAgent.assertNotEquals(id)
		
		bootAgentId.assertEquals(id)
	}

}
