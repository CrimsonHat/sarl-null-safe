/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.testutils

import com.google.common.util.concurrent.Service
import com.google.common.util.concurrent.Service.Listener
import com.google.common.util.concurrent.Service.State
import io.sarl.sre.tests.testutils.annotation.AvoidServiceAutostartForTest
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.testutils.^extension.ServiceManagementExtension
import io.sarl.sre.tests.testutils.mockito.ExecutorMock
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.concurrent.TimeUnit
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static org.junit.jupiter.api.Assertions.assertEquals

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * Abstract class that permits to test the implementation of a SRE service.
 *
 * @param <S> - the type of the service.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(ServiceManagementExtension)
])
abstract class AbstractSreServiceTest<S extends Service> {

	/**
	 * Replies the type of the service under test.
	 *
	 * @return the type of the tested service.
	 */
	abstract def getServiceType : Class<S>

	/** 
	 * Replies the instance of the service under test.
	 * 
	 * @return the instance of the tested service.
	 */
	abstract def newService : S

	@Test
	@AvoidServiceAutostartForTest
	def notificationOnStart(service : S) {
		val listener = typeof(Listener).mock
		service.addListener(listener, new ExecutorMock)
		service.startAsync
		service.awaitRunning(10, TimeUnit::SECONDS)
		listener.verify(1.times).starting
	}

	@Test
	def notificationOnStop(service : S) {
		val listener = typeof(Listener).mock
		service.addListener(listener, new ExecutorMock)
		service.stopAsync
		service.awaitTerminated(10, TimeUnit::SECONDS)
		val arg = ArgumentCaptor::forClass(typeof(State))
		listener.verify(1.times).stopping(arg.capture)
		assertEquals(State::RUNNING, arg.value)
	}

}
