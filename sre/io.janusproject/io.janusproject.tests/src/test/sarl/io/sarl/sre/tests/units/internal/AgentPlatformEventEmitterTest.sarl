/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.internal

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.internal.AgentEventEmitter
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.tests.testutils.agents.IddleTestingAgent
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.ArgumentCaptor

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.junit.jupiter.api.Assertions.*
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.Mockito.spy
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: AgentEventEmitter test")
class AgentEventEmitterTest {

	@Nullable
	var contextID : UUID
	
	@Nullable
	var parent : Context

	@Nullable
	var defaultSpace : OpenEventSpace

	@Nullable
	var agent1 : Agent

	@Nullable
	var agent2 : Agent

	@Nullable
	var life2 : AgentLife

	@Nullable
	var params : Object[]

	@Nullable
	var emitter : AgentEventEmitter
	
	@Nullable
	var logger : Logger

	@BeforeEach
	def setUp : void {
		this.contextID = UUID::randomUUID
		this.logger = Logger::getLogger("SOME")
		this.logger.useParentHandlers = false
		this.logger = this.logger.spy
		var spaceID = typeof(SpaceID).mock
		when(spaceID.contextID).thenReturn(this.contextID)
		when(spaceID.ID).thenReturn(UUID::randomUUID)
		this.defaultSpace = typeof(OpenEventSpace).mock
		when(this.defaultSpace.spaceID).thenReturn(spaceID)
		this.parent = typeof(Context).mock
		when(parent.ID).thenReturn(this.contextID)
		when(parent.defaultSpace).thenReturn(this.defaultSpace)
		this.agent1 = new IddleTestingAgent(this.contextID, UUID.randomUUID()).spy
		this.params = #[]
		this.agent2 = new IddleTestingAgent(this.contextID, UUID.randomUUID()).spy
		this.life2 = AgentLife::getLife(this.agent2)
		this.emitter = new AgentEventEmitter(this.logger)
	}
	
	@Test
	def agentSpawned {
		var agentList = new ConcurrentLinkedDeque
		agentList += agent1
		agentList += agent2
		this.emitter.agentSpawned(this.contextID, this.parent, typeof(IddleTestingAgent),
				agentList, params);
		
		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		assertNotNull(scope.value)
		var evt = ^event.value
		assertNotNull(evt)
		assertInstanceOf(typeof(AgentSpawned), evt)
		var spaceEvent = evt as AgentSpawned
		assertNotNull(spaceEvent.source)
		assertEquals(typeof(IddleTestingAgent).name, spaceEvent.agentType)
		assertContainsCollection(#[agent1.ID, agent2.ID], spaceEvent.agentIdentifiers)
	}

	@Test
	def agentDestroyed {
		var adr1 = new Address(
				new SpaceID(this.contextID, UUID::randomUUID, typeof(OpenEventSpaceSpecification)),
				this.agent2.ID)
		var ctx = typeof(Context).mock
		when(ctx.defaultSpace).thenReturn(this.defaultSpace)
		when(ctx.ID).thenReturn(this.contextID)
		this.life2.setDefaultContext(ctx, adr1);
		var ref1 = this.life2.defaultContext

		var secondContext = UUID::randomUUID
		var adr2 = new Address(
				new SpaceID(secondContext, UUID::randomUUID, typeof(OpenEventSpaceSpecification)),
				this.agent2.ID)
		ctx = typeof(Context).mock
		var space2 = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(space2)
		when(ctx.ID).thenReturn(secondContext)
		var ref2 = this.life2.addExternalContext(ctx, adr2)
		
		var contexts = #[ref1, ref2]
		
		this.emitter.agentDestroyed(agent2, contexts)

		var ^event = ArgumentCaptor::forClass(typeof(Event))
		var scope = ArgumentCaptor::forClass(typeof(Scope))
		
		this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
		assertNotNull(scope.value)
		var evt = ^event.value
		assertNotNull(evt)
		assertInstanceOf(typeof(AgentKilled), evt)
		var spaceEvent = evt as AgentKilled
		assertNotNull(spaceEvent.source)
		assertEquals(agent2.ID, spaceEvent.source.UUID)

		space2.verify.emit(any, ^event.capture, scope.capture)
		assertNotNull(scope.value)
		evt = ^event.value
		assertNotNull(evt)
		assertInstanceOf(typeof(AgentKilled), evt)
		spaceEvent = evt as AgentKilled
		assertNotNull(spaceEvent.source)
		assertEquals(agent2.ID, spaceEvent.source.UUID)
	}

}
