/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces

import com.google.inject.Injector
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.spaces.SpaceParticipantListenerFactory
import io.sarl.sre.spaces.SreRestrictedAccessEventSpaceSpecification
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.util.RestrictedAccessEventSpace
import java.security.acl.Acl
import java.security.acl.Permission
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock

import static io.sarl.tests.api.tools.TestAssertions.*
import static org.junit.jupiter.api.Assertions.*

import static extension io.sarl.tests.api.tools.TestAssertions.assertException
import static extension io.sarl.tests.api.tools.TestMockito.mock
import static extension org.mockito.MockitoAnnotations.initMocks

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SreRestrictedAccessEventSpaceSpecification test")
@Tag("unit")
class SreRestrictedAccessEventSpaceSpecificationTest {

	@Nullable
	var spaceId : SpaceID

	@Mock
	var injector : Injector

	@Mock
	var acl : Acl

	@Mock
	var permission : Permission

	@InjectMocks
	var specification : SreRestrictedAccessEventSpaceSpecification

	@BeforeEach
	def setUp : void {
		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(EventSpaceSpecification))
		this.initMocks
		this.specification = new SreRestrictedAccessEventSpaceSpecification(
			this.injector,
			typeof(OpenEventSpace).mock, typeof(SpaceParticipantListenerFactory).mock,
			typeof(LoggingService).mock)
	}

	@Test
	def create_noAccessRules : void {
		typeof(IllegalArgumentException).assertException [
			this.specification.create(this.spaceId, "a", "b", "c")
		]
	}

	@Test
	def create_missedAcl : void {
		typeof(IllegalArgumentException).assertException [
			this.specification.create(this.spaceId, "a", "b", this.permission, "c")
		]
	}

	@Test
	def create_missedPermission {
		var ^space = this.specification.create(this.spaceId, "a", this.acl, "b", "c")
		assertNotNull(^space)
		assertInstanceOf(typeof(RestrictedAccessEventSpace), ^space)
		assertSame(this.spaceId, ^space.spaceID)
	}

	@Test
	def create_nothingMissed {
		var ^space = this.specification.create(this.spaceId, "a", this.acl, "b", this.permission, "c")
		assertNotNull(^space)
		assertInstanceOf(typeof(RestrictedAccessEventSpace), ^space)
		assertSame(this.spaceId, ^space.spaceID)
	}

}
