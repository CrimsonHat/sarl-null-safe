/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.internal

import io.sarl.lang.core.Event
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.internal.BehaviorGuardEvaluator
import io.sarl.sre.internal.BehaviorGuardEvaluatorRegistry
import io.sarl.sre.skills.internal.EventBus
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.util.Collection
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.logging.Logger
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class EventBusTest extends AbstractSreTest {

	@Nullable
	var registry : BehaviorGuardEvaluatorRegistry

	@Nullable
	var eventBus : EventBus

	@Nullable
	var executor : InternalSchedules

	@Before
	def setUp : void {
		this.registry = typeof(BehaviorGuardEvaluatorRegistry).mock
		this.executor = typeof(InternalSchedules).mock
		this.eventBus = new EventBus([this.executor], this.registry)
	}

	@Test
	def hasRegisteredEventListener {
		when(this.registry.hasRegisteredEventListener(any)).thenReturn(true)
		assertTrue(this.eventBus.hasRegisteredEventListener(typeof(Event)))
	}

	@Test
	def getRegisteredEventListeners {
		when(this.registry.hasRegisteredEventListener(any)).thenReturn(true)
		assertTrue(this.eventBus.hasRegisteredEventListener(typeof(Event)))
	}

	@Test
	def register {
		var listener = typeof(Object).mock
		var filter = typeof(Function1).mock
		var callback = typeof(Procedure1).mock
		this.eventBus.register(listener, filter, callback)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedFilter = ArgumentCaptor::forClass(typeof(Function1))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.registry.verify.register(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		assertSame(listener, capturedListener.value)
		assertSame(filter, capturedFilter.value)
		assertSame(callback, capturedCallback.value)
	}

	@Test
	def unregister {
		var listener = typeof(Object).mock
		var callback = typeof(Procedure1).mock
		this.eventBus.unregister(listener, callback)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.registry.verify.unregister(capturedListener.capture, capturedCallback.capture)
		assertSame(listener, capturedListener.value)
		assertSame(callback, capturedCallback.value)
	}

	@Test
	def unregisterAll {
		var callback = typeof(Procedure1).mock
		this.eventBus.unregisterAll(callback)
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.registry.verify.unregisterAll(capturedCallback.capture)
		assertSame(callback, capturedCallback.value)
	}

	@SuppressWarnings("raw_type")
	@Test
	def asyncDispatch_singleHandler {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(BehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluators(typeof(Event).any)).thenAnswer [
			var evaluators = new ConcurrentLinkedDeque
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler = typeof(Runnable).mock
		doAnswer [
			(it.getArgument(1) as Collection) += eventHandler
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock
	
		// Dispatch
		this.eventBus.asyncDispatch(^event, logger)
		
		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluators(typeof(Event).any)

		var capturedRunnable = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(2.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	def asyncDispatch_twoHandlers {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(BehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluators(typeof(Event).any)).thenAnswer [
			var evaluators = new ConcurrentLinkedDeque
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.asyncDispatch(^event, logger)

		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluators(typeof(Event).any)

		var capturedRunnable = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(3.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	def immediateDispatch : void {
		// Prepare mocks
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(BehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluators(typeof(Event).any)).thenAnswer [
			var evaluators = new ConcurrentLinkedDeque
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.immediateDispatch(^event, true, logger)

		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluators(typeof(Event).any)

		var capturedRunnable = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(2.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

	@SuppressWarnings("raw_type")
	@Test
	def immediateDispatchTo : void {
		// Prepare mocks
		var listener = typeof(Object).mock
		//
		when(this.executor.executeAsap(typeof(Runnable).any)).thenAnswer [
			(it.getArgument(0) as Runnable).run
			return null
		]
		//
		var logger = typeof(Logger).mock
		//
		var evaluator = typeof(BehaviorGuardEvaluator).mock
		when(this.registry.getBehaviorGuardEvaluatorsFor(typeof(Event).any, typeof(Object).any)).thenAnswer [
			var evaluators = new ConcurrentLinkedDeque
			evaluators += evaluator
			return evaluators
		]
		//
		var eventHandler1 = typeof(Runnable).mock
		var eventHandler2 = typeof(Runnable).mock
		doAnswer [
			var col = it.getArgument(1) as Collection
			col += eventHandler1
			col += eventHandler2
			return null
		].when(evaluator).evaluateGuard(typeof(Object).any, typeof(Collection).any)

		// Prepare event
		var ^event = typeof(Event).mock

		// Dispatch
		this.eventBus.immediateDispatchTo(listener, ^event, true, logger)

		// Verify
		this.registry.verify(1.times).getBehaviorGuardEvaluatorsFor(typeof(Event).any, typeof(Object).any)

		var capturedRunnable = ArgumentCaptor::forClass(typeof(Runnable))
		this.executor.verify(2.times).executeAsap(capturedRunnable.capture)
		capturedRunnable.value.assertNotNull
	}

}
