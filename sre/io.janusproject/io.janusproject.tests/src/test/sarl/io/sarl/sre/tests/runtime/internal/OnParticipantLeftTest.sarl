/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.internal

import io.sarl.core.ParticipantLeft
import io.sarl.lang.core.SpaceID
import io.sarl.sre.tests.runtime.internal.mocks.JoinerAgent1
import io.sarl.sre.tests.runtime.internal.mocks.JoinerAgent3
import io.sarl.sre.tests.runtime.internal.mocks.SpyAgent1
import io.sarl.sre.tests.runtime.internal.mocks.SpyAgent3
import io.sarl.sre.tests.testutils.^extension.PropertyRestoreExtension
import io.sarl.sre.tests.testutils.^extension.SreRunContext
import io.sarl.sre.tests.testutils.^extension.SreRunExtension
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.UUID
import org.arakhne.afc.util.OutputParameter
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static io.sarl.sre.tests.testutils.Constants.*

import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertNotEquals
import static extension org.junit.jupiter.api.Assertions.assertNotNull
import static extension org.junit.jupiter.api.Assertions.assertNotSame
import static extension org.junit.jupiter.api.Assertions.assertNull

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension),
	typeof(SreRunExtension)
])
@DisplayName("run: on ParticipantLeft test")
@Tag("run")
class OnParticipantLeftTest {

	@Test
	@DisplayName("ParticipantLeft in default space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantLeftInDefaultSpace(extension rc : SreRunContext) {
		var kern = typeof(SpyAgent1).setupTheSreKernel(null, null)

		Thread::sleep(1000)

		val id : OutputParameter<UUID> = new OutputParameter

		kern.spawnInTest(typeof(JoinerAgent1), [id.set(it)])

		waitForTheKernel(STANDARD_TIMEOUT)

		var evt0 = getResult(bootAgent, typeof(ParticipantLeft), 0)
		evt0.assertNotNull

		var spcid0 = getResult(bootAgent, typeof(SpaceID), 1)
		spcid0.assertNotNull

		var evt1 = getResult(id.get, typeof(ParticipantLeft), 0)
		evt1.assertNull

		id.get.assertEquals(evt0.source.UUID)
		spcid0.assertEquals(evt0.spaceID)
	}

	@Test
	@DisplayName("ParticipantLeft in other space")
	@SuppressWarnings("discouraged_reference")
	def runParticipantLeftInOtherSpace(extension rc : SreRunContext) {
		var kern = typeof(SpyAgent3).setupTheSreKernel(null, null)

		Thread::sleep(1000)

		val id : OutputParameter<UUID> = new OutputParameter

		kern.spawnInTest(typeof(JoinerAgent3), [id.set(it)])

		waitForTheKernel(NO_TIMEOUT)

		var evt0 = getResult(bootAgent, typeof(ParticipantLeft), 0)
		evt0.assertNotNull

		var spcid0 = getResult(bootAgent, typeof(SpaceID), 1)
		spcid0.assertNotNull

		var spcid1 = getResult(id.get, typeof(SpaceID), 0)
		spcid1.assertNotNull

		var evt1 = getResult(id.get, typeof(ParticipantLeft), 1)
		evt1.assertNotNull
		
		spcid0.assertNotEquals(spcid1)
		evt0.assertNotSame(evt1)

		spcid0.assertEquals(evt0.source.spaceID)
		id.get.assertEquals(evt0.source.UUID)
		spcid1.assertEquals(evt0.spaceID)

		spcid0.assertEquals(evt1.source.spaceID)
		bootAgent.assertEquals(evt1.source.UUID)
		spcid0.assertEquals(evt1.spaceID)
	}

}
