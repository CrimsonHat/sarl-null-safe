/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.context

import com.google.inject.Injector
import io.sarl.lang.core.Space
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.spaces.SreSpaceSpecificationFactory
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap
import javax.inject.Inject
import io.sarl.sre.services.logging.LoggingService

/** 
 * A repository of spaces specific to a given context.
 * 
 * <p>This repository is thread-safe.
 * 
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class LocalSpaceRepository extends SpaceRepository {

	val spaces : ConcurrentHashMap<UUID, SpaceDescription>

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param loggingService the logging service.
	 * @param config accessor to the configuration.
	 * @param specificationFactory the factory of space specifications.
	 * @param listenerCollection the instance of the listener collection.
	 * @param lockProvider the provider of the locking objects that must be used to synchronize this repository.
	 */
	@Inject
	new (injector : Injector, executor : ExecutorService, loggingService : LoggingService, config : SreConfig,
		specificationFactory : SreSpaceSpecificationFactory, listenerCollection : SmartListenerCollection<?>) {
		this(injector, executor, loggingService, config, specificationFactory, null, listenerCollection)
	}

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param loggingService the logging service.
	 * @param config the configuration.
	 * @param specificationFactory the factory of space specifications.
	 * @param listenerCollection the instance of the listener collection.
	 * @param lockProvider the provider of the locking objects that must be used to synchronize this repository.
	 */
	new (injector : Injector, executor : ExecutorService,
		loggingService : LoggingService, config : SreConfig,
		specificationFactory : SreSpaceSpecificationFactory,
		internalStructure : ConcurrentHashMap<UUID, SpaceDescription>,
		listenerCollection : SmartListenerCollection<?>) {
		super(injector, executor, loggingService, config, specificationFactory, listenerCollection)
		if (internalStructure !== null) {
			this.spaces = internalStructure
		} else {
			this.spaces = new ConcurrentHashMap<UUID, SpaceDescription>
		}
	}

	protected override getSharedStructure : ConcurrentMap<UUID, SpaceDescription> {
		this.spaces
	}

	protected def existsSpace(spaceUUID : UUID) : boolean {
		this.spaces.contains(spaceUUID)
	}

	protected def removeSpaceIfEmpty(spaceUUID : UUID) {
		var spaceToRemove : Space = this.spaces.get(spaceUUID).^space
		if (spaceToRemove.isPseudoEmpty) {
			super.removeSpace(spaceToRemove)
		}
	}

	protected def removeAllSpacesIfEmpty() {
		var spaceToRemove : Space
		for (spaceDesc : this.spaces.values) {
			spaceToRemove = spaceDesc.^space
			if (spaceToRemove.isPseudoEmpty) {
				super.removeSpace(spaceToRemove)
			}
		}
	}

}
