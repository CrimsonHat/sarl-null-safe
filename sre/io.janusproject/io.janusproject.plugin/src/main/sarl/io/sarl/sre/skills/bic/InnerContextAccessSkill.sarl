/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.bic

import io.sarl.core.InnerContextAccess
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.Skill
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.lifecycle.AgentLife
import java.util.UUID
import java.util.concurrent.ConcurrentSkipListSet
import javax.inject.Inject

import static io.sarl.sre.services.lifecycle.AgentLife.*
import java.util.concurrent.atomic.AtomicBoolean

/** 
 * SRE implementation of SARL's {@link InnerContextAccess} built-in capacity.
 * 
 * <p>The inner context instance is stored into the {@link AgentLife}.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill InnerContextAccessSkill extends Skill implements InnerContextAccess {

	uses InternalEventBusCapacity

	val contextService : ContextService

	/** Constructor.
	 */
	@Inject
	new (service : ContextService) {
		super()
		this.contextService = service
	}

	/** Destroy the inner context instance.
	 * 
	 * <p>This function is thread-safe.
	 */
	private def detroyInnerContext {
		var context = getLife(owner).setInnerContext(null)
		if (context !== null) {
			var ^space = context.defaultSpace
			// Unregister the agent from the default space
			val listener = associatedEventBusListener
			^space.unregister(listener)
			// Destroy the context
			this.contextService.removeContext(context.ID)
		}
	}

	protected override uninstall {
		detroyInnerContext
	}

	def getInnerContext : AgentContext {
		val myself = owner
		var newContext = new AtomicBoolean(false)
		var life = getLife(myself)
		var context = life.getInnerContext [
			var spaceId = it.addressInInnerDefaultSpace.spaceID
			var nctx= this.contextService.createContext(spaceId.contextID, spaceId.ID, myself)
			newContext.set(true)
			return nctx
		]
		if (newContext.get) {
			// Register the agent in the default space
			var ^space = context.defaultSpace
			// Unregister the agent from the default space
			val listener = associatedEventBusListener
			^space.registerStrongParticipant(listener)
		}
		return context
	}

	def isInInnerDefaultSpace(^event : Event) : boolean {
		if (^event !== null) {
			val adr = ^event.source
			if (adr !== null) {
				return adr.spaceID.isInnerDefaultSpace
			}
		}
		return false
	}

	def isInnerDefaultSpace(^space : Space) : boolean {
		isInnerDefaultSpace(^space.spaceID)
	}

	def isInnerDefaultSpace(spaceID : SpaceID) : boolean {
		val context = getLife(owner).getInnerContext(null)
		context !== null && spaceID == context.defaultSpace.spaceID
	}

	def isInnerDefaultSpace(spaceID : UUID) : boolean {
		val context = getLife(owner).getInnerContext(null)
		context !== null && spaceID == context.defaultSpace.spaceID.ID
	}

	def getMemberAgentCount : int {
		val context = getLife(owner).getInnerContext(null)
		if (context !== null) {
			val nb = context.defaultSpace.numberOfStrongParticipants
			assert nb >= 1, "The agent must be a participant of its inner conntext's default space"
			return nb - 1
		}
		return 0
	}

	def getMemberAgents : ConcurrentSkipListSet<UUID> {
		val context = getLife(owner).getInnerContext(null)
		if (context !== null) {
			var filtered = new ConcurrentSkipListSet
			val oid = this.owner.ID
			context.defaultSpace.forEachStrongParticipant [
				if (it != oid) {
					filtered.add(it)
				}
			]
			return filtered
		}
		return new ConcurrentSkipListSet
	}

	def hasMemberAgent : boolean {
		val context = getLife(owner).getInnerContext(null)
		if (context !== null) {
			return !context.defaultSpace.isPseudoEmpty(owner.ID)
		}
		return false;
	}

}
