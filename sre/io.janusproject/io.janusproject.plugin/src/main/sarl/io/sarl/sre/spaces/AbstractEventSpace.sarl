/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.spaces

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.logging.LoggingService
import java.text.MessageFormat
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.logging.Level
import javax.inject.Inject
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract implementation of an event space.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class AbstractEventSpace extends AbstractSpace implements EventSpace, SpaceWithParticipants {

		/** 
		 * Logging service.
		 */
	@Accessors(PUBLIC_GETTER)
	val logger : LoggingService

	/** Router of the events.
	 * @since 0.8
	 */
	@Accessors(PUBLIC_GETTER)
	var eventTransportService : EventTransportService

	/** Listener on platform events related to space participants.
	 * @since 0.10
	 */
	@Accessors(PUBLIC_GETTER)
	var spaceParticipantListener : SpaceParticipantListener

	/** Constructor.
	 * 
	 * @param id identifier of the space.
	 * @param lockProvider the provider of synchronization locks.
	 * @param participantListener the platform listener on participant events.
	 * @param logger the logger service.
	 */
	new (spaceId : SpaceID, participantListener : SpaceParticipantListener, logger : LoggingService) {
		super(spaceId)
		this.spaceParticipantListener = participantListener
		this.logger = logger
	}

	/** Set the event router.
	 * 
	 * @param router the router.
	 * @since 0.8
	 */
	@Inject
	def setEventTransportService(router : EventTransportService) {
		this.eventTransportService = router
	}

	/**
	 * Register the specified entity on this space
	 * @param entity - the entity to be registered
	 * @param weakParticipant - boolean (default true) specifying if the specified entity may prevent the space 
	 * from the destruction if it is the only remaining entity within this space. 
	 * A Weak participant will not prevent the space from begin destroyed if it is the only one staying in it, a Strong participant will prevent it.
	 * A space containing only Weak participants will be destroyed by the SRE Kernel  
	 */
	protected final def registerToSpace(entity : EventListener, weakParticipant : boolean = true) : Address {
		assert entity !== null
		var id = entity.ID
		var address = new Address(this.spaceID, id)
		var participant = Participant::createAndInit(address, entity)

		if (weakParticipant) {
			ensureInternalWeakParticipantStructure.put(id, participant)
		} else {
			internalStrongParticipantStructure.put(id, participant)
		}

		getSpaceParticipantListener?.participantJoined(participant)
		return address
	}

	protected final def unregisterFromSpace(entity : EventListener) : Address {
		assert entity !== null
		var participant : Participant = null
		var becomesEmpty : boolean

		var structure = this.internalStrongParticipantStructure
		participant = structure.remove(entity.ID)
		becomesEmpty = structure.empty
		if (participant === null) {
			// Try a weak listener
			structure = this.internalWeakParticipantStructure
			if (structure !== null) {
				participant = structure.remove(entity.ID)
			}
		}

		if (participant !== null) {
			if (becomesEmpty) {
				fireDestroyableSpace
			}
			getSpaceParticipantListener?.participantLeft(participant)
			return participant.address
		}
		return null
	}

	def getAddress(id : UUID) : Address {
		assert id !== null
		var participant : Participant = null

		participant = this.internalStrongParticipantStructure.get(id)
		if (participant !== null) {
			return participant.address
		}

		participant = this.internalWeakParticipantStructure?.get(id)
		if (participant !== null) {
			return participant.address
		}

		return null
	}

	final def emit(eventSource : UUID, ^event : Event, scope : Scope<Address>) {
		assert ^event !== null
		ensureEventSource(eventSource, ^event)
		assert this.spaceID == ^event.source.spaceID, "The source address must belong to this space"
		try {
			var mts = getEventTransportService
			if (mts === null || mts.routeEvent(^event, this, scope)) {
				^event.emitLocally(scope)
			}
		} catch (e : Throwable) {
			this.logger.kernelLogger.log(Level::SEVERE,
				MessageFormat::format(Messages::AbstractEventSpace_0, ^event, scope, e), e)
		}
	}

	/** Ensure that the given event has a source.
	 * 
	 * @param eventSource the source of the event.
	 * @param event the event to emit.
	 * @since 0.6.0
	 */
	protected def ensureEventSource(eventSource : UUID, ^event : Event) {
		if (^event.source === null) {
			if (eventSource !== null) {
				^event.source = new Address(spaceID, eventSource)
			} else {
				throw new AssertionError("Every event must have a source")
			}
		}
	}

	/** Replies the participants that matches the given scope.
	 * 
	 * @param scope the scope.
	 * @return the matching participants.
	 */
	protected def getScopedParticipants(scope : Scope<? super Address>) : ConcurrentLinkedDeque<Participant> {
		val scopedParticipants = new ConcurrentLinkedDeque
		if (scope === null) {
			for (p : internalStrongParticipantStructure.values) {
				scopedParticipants += p
			}
			val struct = internalWeakParticipantStructure
			if (struct !== null) {
				for (p : struct.values) {
					scopedParticipants += p
				}
			}
		} else {
			for (p : internalStrongParticipantStructure.values) {
				if (scope.matches(p.address)) {
					scopedParticipants += p
				}
			}
			val struct = internalWeakParticipantStructure
			if (struct !== null) {
				for (p : struct.values) {
					if (scope.matches(p.address)) {
						scopedParticipants += p
					}
				}
			}
		}
		return scopedParticipants
	}

	/** 
	 * Do the emission of the event.
	 * 
	 * <p>This function emits the event <strong>only on the internal event bus</strong> of the listeners.
	 * 
	 * <p>This function launch a task for each matching listener.
	 * 
	 * @param event the event to emit.
	 * @param scope description of the scope of the event, i.e. the receivers of the event.
	 */
	protected def emitLocally(^event : Event, scope : Scope<? super Address>) {
		assert ^event !== null
		// Distinguish the emit and reception processes into two different tasks.
		// The emit process is run in the current thread.
		// The reception process should be treated into a separate thread in order
		// to never block the sender process.
		val participants = getScopedParticipants(scope)
		if (participants !== null) {
			for (it : participants) {
				it.getParticipant.receiveEvent(^event)
			}
		}
	}

	@Pure
	override getNumberOfStrongParticipants : int {
		internalStrongParticipantStructure.size
	}

	@Pure
	override isPseudoEmpty(id : UUID) : boolean {
		val struct = internalStrongParticipantStructure
		val sz = struct.size
		if (sz <= 0) {
			return true
		}
		if (id !== null) {
			return sz === 1 && struct.containsKey(id)
		}
		return false
	}

	override forEachStrongParticipant(callback : (UUID)=>void) {
		for (participant : internalStrongParticipantStructure.values) {
			callback.apply(participant.address.UUID)
		}	
	}

}
