/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.context

import com.google.inject.AbstractModule
import com.google.inject.Injector
import com.google.inject.name.Names
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.ContextsConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.spaces.AbstractSpace
import io.sarl.sre.spaces.SpaceListener
import io.sarl.sre.spaces.SreSpaceSpecificationFactory
import io.sarl.util.ConcurrentSet
import io.sarl.util.ConcurrentSetSkipListSet
import io.sarl.util.DefaultSpace
import java.io.Serializable
import java.lang.ref.WeakReference
import java.text.MessageFormat
import java.util.EventListener
import java.util.Objects
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ConcurrentMap
import java.util.concurrent.TimeUnit
import java.util.logging.Logger
import javax.inject.Inject
import org.eclipse.xtend.lib.annotations.Data

/** 
 * A repository of spaces specific to a given context.
 * 
 * <p>This repository is thread-safe.
 * 
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class SpaceRepository implements SpaceListener {

	val injector : Injector

	val executor : ExecutorService
	
	protected val logger : Logger

	val contextsRepositoryConfig : ContextsConfig

	val listeners : SmartListenerCollection<?>

	val specs : ConcurrentMap<SpaceSpecificationKey, SpaceSpecification<?>> = new ConcurrentHashMap

	val spacesBySpec : ConcurrentMap<Class<? extends SpaceSpecification<?>>, ConcurrentSet<SpaceDescription>> = new ConcurrentHashMap

	/** Reference to the default space of the owning context.
	 * @since 0.10
	 */
	var defaultSpace : WeakReference<OpenEventSpace>

	val specificationFactory : SreSpaceSpecificationFactory

	/** Constructor.
	 * 
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 * @param logger the logging service.
	 * @param config the configuration.
	 * @param specificiationFactory the factory of space spacification.
	 * @param listenerCollection the instance of the listener collection.
	 */
	@Inject
	new (injector : Injector, executor : ExecutorService, logger : LoggingService, 
		config : SreConfig, specificationFactory : SreSpaceSpecificationFactory,
		listenerCollection : SmartListenerCollection<?>) {
		this.injector = injector
		this.executor = executor
		this.logger = createLogger(logger)
		this.contextsRepositoryConfig = config.contexts
		this.listeners = listenerCollection
		this.specificationFactory = specificationFactory
	}

	/** Create the loggier for this repository.
	 *
	 * @param loggingService the service for logging.
	 * @return the logger.
	 */
	protected def createLogger(loggingService : LoggingService) : Logger {
		loggingService.getKernelModuleLogger(Messages::SpaceRepository_2)
	}

	/** Replies the internal map that contains the spaces
	 */
	protected abstract def getSharedStructure : ConcurrentMap<UUID, SpaceDescription>

	/** Create a space description.
	 * 
	 * <p>This function should be overridden by the sub-types.
	 * 
	 * @param id the space identifier.
	 * @param space the space instance.
	 * @return the description.
	 */
	protected def createSpaceDescription(id : SpaceID, ^space : Space) : SpaceDescription {
		new SpaceDescription(id, ^space)
	}

	/** Replies the space information associated to the space if already associated.
	 * 
	 * <p>This function is not thread-safe.
	 * 
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(^space : Space, newDescription : SpaceDescription) : SpaceDescription {
		if (^space instanceof AbstractSpace) {
			if (newDescription !== null) {
				SREutils::setSreSpecificData(^space, newDescription)
				return newDescription
			}
			return SREutils::getSreSpecificData(^space, typeof(SpaceDescription))
		}
		return null
	}

	/** Replies the space information associated to the space identifier if already associated.
	 * 
	 * <p>This function is not thread-safe.
	 * 
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(spaceId : SpaceID, newDescription : SpaceDescription) : SpaceDescription {
		if (newDescription !== null) {
			SREutils::setSreSpecificData(spaceId, newDescription)
			return newDescription
		}
		return SREutils::getSreSpecificData(spaceId, typeof(SpaceDescription))
	}

	/** 
	 * Create an instance of the default space if it was not created before.
	 * 
	 * @param spaceID ID of the default space.
	 * @return the new space.
	 */
	package final def createDefaultSpace(spaceID : SpaceID) : OpenEventSpace {
		var defaultSpace = getOrCreateSpaceWithID(spaceID, typeof(OpenEventSpaceSpecification))

		if (defaultSpace === null) {
			this.defaultSpace = null
		} else {
			this.defaultSpace = new WeakReference(defaultSpace)
		}

		return defaultSpace
	}

	private def getSpaceSpecificationInstance(spec : Class<T>) : T with T extends SpaceSpecification<?> {
		var defaultSpace : OpenEventSpace = this.defaultSpace?.get
		val key = new SpaceSpecificationKey(spec, defaultSpace === null)
		val instance = spec.cast(this.specs.computeIfAbsent(key) [
			var specInstance : SpaceSpecification<?>
			if (it.isDefaultSpace) {
				// Usually, this case cover the creation of the default space within a context
				specInstance = this.specificationFactory.createOpenEventSpaceSpecificationForDefaultSpace(spec)
				this.injector.injectMembers(specInstance)
			} else {
				// Usually, this case is for the creation of the spaces that are not the default space
				specInstance = this.specificationFactory.createOpenEventSpaceSpecificationInInnerContext(spec, defaultSpace)
				val defaultSpaceInjectionModule = new JustInTimeDefaultSpaceInjectionModule(defaultSpace)
				val defaultSpaceInjector = this.injector.createChildInjector(defaultSpaceInjectionModule)
				defaultSpaceInjector.injectMembers(specInstance)
			}
			assert specInstance !== null
			return specInstance
		])
		assert instance !== null
		return instance
	}

	protected def createSpaceFirstInstance(spec : Class<? extends SpaceSpecification<S>>, spaceID : SpaceID,
		creationParams : Object[]) : S with S extends Space {
		assert spaceID.spaceSpecification === null ||
			spaceID.spaceSpecification == spec, "The specification type is invalid"

		val spaceSpecificationInstance = spec.spaceSpecificationInstance

		// Split the call to create() to let the JVM to create the "empty" array for creation parameters.
		var ^space : S
		if (creationParams !== null && creationParams.length > 0) {
			^space = spaceSpecificationInstance.create(spaceID, creationParams)
		} else {
			^space = spaceSpecificationInstance.create(spaceID)
		}
		assert ^space !== null

		val id = ^space.spaceID
		assert id !== null
		val description = createSpaceDescription(id, ^space)
		^space.life(description)
		id.life(description)
		val spaces = sharedStructure

		val list = this.spacesBySpec.computeIfAbsent(
			id.spaceSpecification) [
			new ConcurrentSetSkipListSet<SpaceDescription>
		]
		list += description

		spaces.put(id.ID, description)
		if (^space instanceof AbstractSpace) {
			^space.spaceListenerIfNone = this
		}
		^space.fireSpaceAdded(true)
		return ^space
	}

	/** Synchronize the internal structures of SpaceRepository with the content of
	 * {@link #getSharedStructure()}.
	 * 
	 * <p>This function is thread-safe.
	 * 
	 * <p>Caution: Do not call this function if you are not certain it does the expected things.
	 */
	def refreshInternalStructures : void {
		this.spacesBySpec.clear
		for (description : this.sharedStructure.values) {
			var ^space = description.^space
			var spaceId = ^space.spaceID
			^space.life(description)
			spaceId.life(description)
			val list = this.spacesBySpec.computeIfAbsent(
				spaceId.spaceSpecification) [
				new ConcurrentSetSkipListSet<SpaceDescription>
			]
			list += description
			if (^space instanceof AbstractSpace) {
				^space.spaceListenerIfNone = this
			}
		}
	}

	private def ensureSpaceInstance(description : SpaceDescription) : Space {
		assert description !== null
		if (description.getSpace === null) {
			val id = description.spaceID
			assert id !== null
			val ^space = id.spaceSpecification.spaceSpecificationInstance.create(id)
			assert ^space !== null
			description.setSpace = ^space
			^space.life(description)
			id.life(description)
			^space.fireSpaceAdded(false)
		}
		return description.getSpace
	}

	/** 
	 * Destroy this repository and release all the resources.
	 */
	final def destroy {
		safeDestroy
		this.listeners.clear
	}

	/** 
	 * Destroy this repository and release all the resources inside a synchronized section.
	 */
	protected def safeDestroy {
		val spaces = sharedStructure
		var iterator = spaces.values.iterator
		while (iterator.hasNext) {
			var description = iterator.next
			var ^space = description.^space
			description.^space = null
			^space.life(null)
			^space.spaceID.life(null)
			iterator.remove
		}
		this.spacesBySpec.clear
	}

	/** 
	 * Create a space.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters.
	 * @return the new space, or {@code null} if the space already exists.
	 */
	def createSpace(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		assert spaceID.spaceSpecification ==
			spec, "The space identifier does not contains the same specification as the one given to the creation function"
		this.logger.finer[MessageFormat::format(Messages::SpaceRepository_0, spaceID.contextID, spaceID.ID, spec.name)]
		spec.createSpaceFirstInstance(spaceID, creationParams)
	}

	/** 
	 * Remove a space.
	 * 
	 * @param space the space.
	 */
	def removeSpace(^space : Space) {
		if (^space !== null) {
			var spaceID = ^space.spaceID
			this.logger.finer[MessageFormat::format(Messages::SpaceRepository_1, spaceID.contextID, spaceID.ID)]
			var spaces = sharedStructure
			assert spaces !== null
			var description : SpaceDescription = spaces.remove(spaceID.ID)
			if (description !== null) {
				var cousins = this.spacesBySpec.get(spaceID.spaceSpecification)
				if (cousins !== null) {
					cousins.remove(description)
				}
			}

			^space.life(null)
			spaceID.life(null)
			if (description !== null) {
				description.^space = null
				^space.fireSpaceRemoved(true)
			}
		}
	}

	/** 
	 * Retrieve the first space of the given specification, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space (used only when creating a space).
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithSpec(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		var description : SpaceDescription = null

		var spaces = spacesBySpec.get(spec)
		if (spaces !== null && !spaces.empty) {
			var defaultSpace = this.defaultSpace?.get
			var iter = spaces.iterator
			if (defaultSpace === null) {
				if (iter.hasNext) {
					description = iter.next
				}
			} else {
				val dfid = defaultSpace.spaceID
				while (description === null && iter.hasNext) {
					var desc = iter.next
					if (dfid != desc.spaceID) {
						description = desc
					}
				}
			}
		}

		if (description === null) {
			return spec.createSpaceFirstInstance(spaceID, creationParams)
		}
		return description.ensureSpaceInstance as S
	}

	/** 
	 * Retrieve the first space of the given identifier, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithID(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		val spaces = sharedStructure
		var description : SpaceDescription = spaces.get(spaceID.ID)

		if (description === null) {
			return spec.createSpaceFirstInstance(spaceID, creationParams)
		}
		return description.ensureSpaceInstance as S
	}

	/** 
	 * Returns the collection of all spaces stored in this repository.
	 * 
	 * @return the collection of all spaces stored in this repository.
	 */
	def getSpaces : ConcurrentLinkedDeque<? extends Space> {
		val spaces = sharedStructure
		// TODO optimize this code below to avoid this filter loop
		var translated = new ConcurrentLinkedDeque
		for (t : spaces.values.map[it.ensureSpaceInstance]) {
			translated.add(t)
		}
		return translated
	}

	/** 
	 * Returns the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository.
	 * 
	 * @param <S> - type of the spaces to reply.
	 * @param spec the specification used to filter the set of stored spaces.
	 * @return the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository
	 */
	def getSpaces(spec : Class<? extends SpaceSpecification<S>>) : ConcurrentLinkedDeque<S> with S extends Space {

		var spaces = this.spacesBySpec.get(spec)
		if (spaces !== null) {
			// TODO optimize this code below to avoid this filter loop
			var mapped = new ConcurrentLinkedDeque<S>
			for (m : spaces.map[it.ensureSpaceInstance as S]) {
				mapped.add(m)
			}
			return mapped
		}

		return new ConcurrentLinkedDeque<S>
	}

	/** 
	 * Returns the first instance of a space with the specified SpaceID.
	 * 
	 * @param spaceID the identifier to retrieve.
	 * @return the space instance of {@code null} if none.
	 */
	def getSpace(spaceID : SpaceID) : Space {
		val spaces = sharedStructure
		var description = spaces.get(spaceID.ID)
		if (description !== null) {
			return description.ensureSpaceInstance
		}
		return null
	}

	/** Add listener on the space repository changes.
	 * 
	 * @param listener
	 */
	def addSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.add(typeof(SpaceRepositoryListener), listener)
	}

	/** Remove listener on the space repository changes.
	 * 
	 * @param listener
	 */
	def removeSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.remove(typeof(SpaceRepositoryListener), listener)
	}

	/** 
	 * Notifies the listeners on the space creation.
	 * 
	 * @param space the created space.
	 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
	 */
	protected def fireSpaceAdded(^space : Space, isLocalCreation : boolean) {
		this.listeners.notifyListeners(typeof(SpaceRepositoryListener)) [
			spaceCreated(^space, isLocalCreation)
		]
	}

	/** 
	 * Notifies the listeners on the space destruction.
	 * 
	 * @param space the removed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	protected def fireSpaceRemoved(^space : Space, isLocalDestruction : boolean) {
		this.listeners.notifyListeners(typeof(SpaceRepositoryListener)) [
			spaceDestroyed(^space, isLocalDestruction)
		]
	}

	override destroyableSpace(^space : Space) {
		var run : Runnable = [
			if (^space.isPseudoEmpty) {
				removeSpace(^space)
			}
		]
		val delay = this.contextsRepositoryConfig.spaceDestructionCallbackDelay
		this.executor.schedule(delay, TimeUnit::MILLISECONDS, run)
	}

	/** 
	 * Description of a space.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	static class SpaceDescription implements Serializable, Comparable<SpaceDescription> {

		val id : SpaceID

		transient var ^space : Space

		new (id : SpaceID, ^space : Space) {
			this.id = id
			this.^space = ^space
		}

		def getSpaceID : SpaceID {
			this.id
		}

		def getSpace : Space {
			return this.^space
		}

		def setSpace(^space : Space) {
			this.^space = ^space
		}

		def equals(obj : Object) : boolean {
			if (obj instanceof SpaceDescription) {
				return this.id == obj.id
			}
			return false
		}

		def hashCode : int {
			this.id.hashCode
		}

		def compareTo(other : SpaceDescription) : int {
			if (other !== null) {
				return this.id <=> other.id
			}
			return Integer::MIN_VALUE
		}

	}

	/** 
	 * An injection module that is able to inject the default space instance into another space implementation.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.10
	 */
	private static class JustInTimeDefaultSpaceInjectionModule extends AbstractModule {

		static val NAME = "defaultSpace"

		val defaultSpace : OpenEventSpace

		package new (defaultSpace : OpenEventSpace) {
			assert defaultSpace !== null
			this.defaultSpace = defaultSpace
		}

		override configure {
			typeof(OpenEventSpace).bind.annotatedWith(Names::named(NAME)).toInstance(this.defaultSpace)
			typeof(OpenEventSpace).bind.annotatedWith(typeof(DefaultSpace)).toInstance(this.defaultSpace)
		}

	}

	/** 
	 * Key for a space specification.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	@Data
	static class SpaceSpecificationKey implements Serializable, Comparable<SpaceSpecificationKey> {

		val type : Class<? extends SpaceSpecification<?>>

		val isDefaultSpace : boolean

		override compareTo(o : SpaceSpecificationKey) : int {
			if (o === this) return 0
			if (o === null) return 1
			var cmp = this.isDefaultSpace <=> o.isDefaultSpace
			if(cmp !== 0) return cmp
			cmp = this.type.name <=> o.type.name
			return cmp
		}

		override equals(obj : Object) : boolean {
			if (this === obj) return true
			if (obj === null) return false
			if (this.class !== obj.class) return false
			val other = obj as SpaceSpecificationKey
			if (other.isDefaultSpace !== this.isDefaultSpace) return false
			if (type !== other.type) return false
			return true;
		}	

		override hashCode() : int {
			var prime = 31
			var result = prime * 0 + Boolean::hashCode(this.isDefaultSpace)
			result = prime * result + Objects::hashCode(this.isDefaultSpace)
			return result
		}

	}

}

/** 
 * Listener on events related to the space repository.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface SpaceRepositoryListener extends EventListener {

		/** 
		 * Invoked when the space is added.
		 * 
		 * @param space reference to the created space.
		 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
		 */
	def spaceCreated(^space : Space, isLocalCreation : boolean)

	/** 
	 * Invoked when the space is destroyed.
	 * 
	 * @param space reference to the destroyed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	def spaceDestroyed(^space : Space, isLocalDestruction : boolean)

}

/** Factory for a space event emitter.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
interface SpaceRepositoryListenerFactory {

	def create(contextID : UUID, defaultSpace : EventSpace, logger : Logger) : SpaceRepositoryListener

}
