/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.lifecycle

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.SREutils
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.KernelScope
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.logging.LoggingService
import java.lang.reflect.Constructor
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider

/** 
 * Implementation of a spawning service that is using standard object creation
 * for creating the agents.
 * No injection mechanism is used.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class StandardLifecycleService extends AbstractLifecycleService {

	/**
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param skillProvider the provider of skills that should be used to init the agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the configuration of the SRE.
	 */
	@Inject
	new (sarlSpecificationChecker : SarlSpecificationChecker,
		skillProvider : DynamicSkillProvider,
		globalListeners : SmartListenerCollection<?>,
		@KernelScope lifecycleListener : Provider<LifecycleServiceListener>,
		@KernelScope externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		this(sarlSpecificationChecker, new CreatorFactory(skillProvider),
			globalListeners, lifecycleListener, externalContextListener,
			skillUninstaller, executor, logger, sreConfig.services.lifecycle)
	}

	/**
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @parma lifecycleConfig the configuration of the lifecycle service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		globalListeners : SmartListenerCollection<?>, lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller, executor : ExecutorService, logger : LoggingService,
		lifecycleConfig : LifecycleConfig) {
		super(sarlSpecificationChecker, creator, globalListeners, lifecycleListener,
			externalContextListener, skillUninstaller, executor, logger, lifecycleConfig)
	}

	/** 
	 * A factory of agent creator that provides the parent ID and agent ID to the created agent.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	private static class CreatorFactory extends AbstractCreatorFactory {

		var creationIndex = 0

		def getAgentCreator(
			agentClazz : Class<T>,
			parent : UUID,
			nbAgents : int,
			skillProviders : Iterable<DynamicSkillProvider>,
			agentId : (int)=>UUID) : Provider<T> with T extends Agent {
			val cons = agentClazz.agentConstructor
			val sproviders = skillProviders.mergeSkillProviders
			return [
				cons.createAgent(agentClazz, parent, agentId, sproviders)
			]
		}

		@SuppressWarnings("use_reserved_sarl_annotation")
		@PrivateAPI(isCallerOnly = true)
		private def createAgent(constructor : Constructor<T>, agentClazz : Class<T>,
				parentId : UUID, agentId : (int)=>UUID, skillProvider : DynamicSkillProvider) : T with T extends Agent {
			var idx : int
			synchronized (this) {
				idx = this.creationIndex
				this.creationIndex++
			}
			var aid = agentId.apply(idx)
			try {
				var ^agent = constructor.newInstance(parentId, aid)
				SREutils::setDynamicSkillProvider(^agent, skillProvider)
				return ^agent
			} catch (exception : Exception) {
				throw new CannotSpawnException(agentClazz, exception)
			}
		}

		private def getAgentConstructor(agentClazz : Class<T>) : Constructor<T> with T extends Agent {
			var cons : Constructor<T> = null
			var e1 : Exception = null
			try {
				cons = agentClazz.getConstructor(typeof(UUID), typeof(UUID))
			} catch (exception : Exception) {
				cons = null
				e1 = exception
			}
			var e2 : Exception = null
			if (cons === null) {
				try {
					cons = agentClazz.getConstructor(typeof(UUID), typeof(UUID), typeof(DynamicSkillProvider))
				} catch (exception : Exception) {
					cons = null
					e2 = exception
				}
			}
			if (cons === null) {
				throw new CannotSpawnException(agentClazz, e1 ?: e2)
			}
			cons.accessible = true
			return cons
		}
	
	}

}
