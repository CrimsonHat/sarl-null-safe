/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.lifecycle

import com.google.inject.Injector
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.SREutils
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.KernelScope
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.logging.LoggingService
import java.lang.reflect.Constructor
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Inject
import javax.inject.Provider

/** 
 * Implementation of a spawning service that is using injection mechanism
 * for creating the agent.
 * 
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class InjectionBasedLifecycleService extends AbstractLifecycleService {

	/**
	 * Constructs the service with the given (injected) injector.
	 * 
	 * @param injector
	 * the injector that should be used by this service for creating the agents.
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param skillProvider the provider of skills that should be used to init the agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lockProvider the provider of locks.
	 * @param rwLockProvider the provider of read-write locks.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the configuration of the SRE.
	 */
	@Inject
	new (injector : Injector, sarlSpecificationChecker : SarlSpecificationChecker,
		skillProvider : DynamicSkillProvider,
		globalListeners : SmartListenerCollection<?>,
		lockProvider : Provider<Lock>, rwLockProvider : Provider<ReadWriteLock>,
		@KernelScope lifecycleListener : Provider<LifecycleServiceListener>,
		@KernelScope externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		this(sarlSpecificationChecker, new CreatorFactory(injector, skillProvider),
			globalListeners, lockProvider, rwLockProvider, lifecycleListener, externalContextListener,
			skillUninstaller, executor, logger, sreConfig.services.lifecycle)
	}

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lockProvider the provider of locks.
	 * @param rwLockProvider the provider of read-write locks.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param lifecycleConfig the configuration of the lifecycle service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		globalListeners : SmartListenerCollection<?>,
		lockProvider : Provider<Lock>, rwLockProvider : Provider<ReadWriteLock>,
		lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller, executor : ExecutorService, logger : LoggingService,
		lifecycleConfig : LifecycleConfig) {
		super(sarlSpecificationChecker, creator, globalListeners,
			lockProvider, rwLockProvider, lifecycleListener,
			externalContextListener, skillUninstaller, executor, logger, lifecycleConfig)
	}

	/** 
	 * An injection module that is able to inject the parent ID and agent ID when creating an agent.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class CreatorFactory extends AbstractCreatorFactory  {

		val injector : Injector

		new (injector : Injector, skillProvider : DynamicSkillProvider) {
			super(skillProvider)
			this.injector = injector
		}
	
		@SuppressWarnings("use_reserved_sarl_annotation")
		@PrivateAPI(isCallerOnly = true)
		def getAgentCreator(
			agentClazz : Class<? extends Agent>,
			parent : UUID,
			nbAgents : int,
			skillProviders : ConcurrentLinkedDeque<DynamicSkillProvider>) : (UUID)=>Agent {
			var sproviders = skillProviders.mergeSkillProviders

			assert agentClazz!== null
			var e1 : Exception = null
			var cons1 : Constructor<? extends Agent>
			try {
				cons1 = agentClazz.getConstructor(typeof(UUID), typeof(UUID))
			} catch (exception : Exception) {
				e1 = exception
				cons1 = null
			}
			var e2 : Exception = null
			var cons2 : Constructor<? extends Agent>
			try {
				cons2 = agentClazz.getConstructor(typeof(UUID), typeof(UUID), typeof(DynamicSkillProvider))
			} catch (exception : Exception) {
				e2 = exception
				cons2 = null
			}
			if (cons1 === null && cons2 === null) {
				throw new CannotSpawnException(agentClazz, e1 ?: e2)
			}

			val constructor1 = cons2
			val constructor2 = cons2
			return [
				var ag : Agent
				if (constructor2 !== null) {
					constructor2.accessible = true
					ag = constructor2.newInstance(parent, it, sproviders)
				} else {
					constructor1.accessible = true
					var ^agent = constructor1.newInstance(parent, it)
					SREutils::setDynamicSkillProvider(^agent, sproviders)
				}
				this.injector.injectMembers(ag)
				return ag
			]
		}

	}

}
