/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.lifecycle

import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Capacity
import io.sarl.lang.util.AtomicClearableReference
import io.sarl.lang.core.Skill

/** 
 * Abstract implementation of a factory of agent creator that provides the parent ID and agent ID to the created agent.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
abstract class AbstractCreatorFactory implements AgentCreatorProvider {

	val skillProvider : DynamicSkillProvider

	/** Constructor.
	 *
	 * @param skillProvider is the provider of skills that should be given to the created agents.
	 *     The provider may be {@code null}.
	 */
	new (skillProvider : DynamicSkillProvider = null) {
		this.skillProvider = skillProvider
	}

	@Pure
	private static def extract(providers : Iterable<DynamicSkillProvider>, ^agent : Agent,
		^capacity : Class<? extends Capacity>) : AtomicClearableReference<Skill> {
		for (provider : providers) {
			var r = provider.installSkill(^agent, ^capacity)
			if (r !== null) {
				var s = r.get
				if (s !== null) {
					return r
				}
			}
		}
		return null
	}

	/** Create a skill provider that is delegating the creation to a set of providers.
	 *
	 * @param providers is the list of skill providers to be integrated into the skill provider.
	 * @return the skill provider to give to the agents.
	 */
	def mergeSkillProviders(providers : Iterable<DynamicSkillProvider>) : DynamicSkillProvider {
		if (providers !== null) {
			var iterator = providers.iterator
			if (iterator.hasNext) {
				if (this.skillProvider === null) {
					return [ ^agent, ^capacity |
						return providers.extract(^agent, ^capacity)
					]
				}
				return [ ^agent, ^capacity |
					var r = this.skillProvider.installSkill(^agent, ^capacity)
					if (r !== null) {
						var s = r.get
						if (s !== null) {
							return r
						}
					}
					return providers.extract(^agent, ^capacity)
				]
			}
		}
		return this.skillProvider
	}

}
