/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.internal.eventguard.reflect

import io.sarl.lang.annotation.PerceptGuardEvaluator
import io.sarl.lang.core.Event
import io.sarl.sre.internal.MutableBoolean
import io.sarl.sre.internal.eventguard.AbstractBehaviorGuardEvaluatorRegistry
import io.sarl.sre.internal.eventguard.IBehaviorGuardEvaluator
import java.lang.reflect.Method
import java.util.Collection
import java.util.Iterator
import java.util.Map.Entry
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.CopyOnWriteArraySet
import org.eclipse.xtend.lib.annotations.Data

import static extension io.sarl.sre.internal.eventguard.reflect.StaticReflectBehaviorGuardEvaluatorDictionary.*
import java.util.concurrent.ConcurrentMap

/** 
 * Registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a
 * given behavior (on clause in SARL behavior).
 * 
 * <p>This class is thread-safe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ReflectBehaviorGuardEvaluatorRegistry extends AbstractBehaviorGuardEvaluatorRegistry<GuardedEvaluator> {

	/**
	 * All registered {@code BehaviorGuardEvaluator}s (class containing at least one PerceptGuardEvaluator method), indexed by event type.
	 *
	 * <p>The {@link CopyOnWriteArraySet} values make it easy and relatively lightweight to get an immutable snapshot of all current
	 * {@code BehaviorGuardEvaluator}s to an event without any locking.
	 */
	val evaluators : ConcurrentMap<Class<? extends Event>, CopyOnWriteArraySet<GuardedEvaluator>>

	/** 
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 * 
	 * <p>The registry will use concurrent data structures.
	 * 
	 * @param internalMap the internal map.
	 */
	new {
		this.evaluators = new ConcurrentHashMap
	}

	@Pure
	override getInternalDataStructure : ConcurrentMap<Class<? extends Event>, CopyOnWriteArraySet<GuardedEvaluator>> {
		this.evaluators
	}

	@Pure
	protected override getInternalEvaluatorFilter : (GuardedEvaluator, Event)=>boolean {
		[
			val filter = $0.registrationGuard
			return filter === null || filter.apply($1)
		]
	}

	@Pure
	protected override getInternalEvaluatorMapper : (GuardedEvaluator)=>IBehaviorGuardEvaluator {
		[
			it.evaluator
		]
	}

	override register(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void = null) {
		assert listener !== null
		val hasCallback = new MutableBoolean(callback !== null)
		var methodIterator = new MethodIterator(listener)
		while (methodIterator.hasNext) {
			val method = methodIterator.next

			val evaluators = internalDataStructure.computeIfAbsent(method.type) [
				new CopyOnWriteArraySet
			]

			for (meth : method.methods) {
				var success = evaluators +=
					new GuardedEvaluator(filter, new ReflectBehaviorGuardEvaluator(listener, meth))
				if (!success) {
					hasCallback.set(false)
				}
			}
		}
		if (hasCallback.get) {
			callback.apply(listener)
		}
	}

	override unregister(listener : Object, callback : (Object)=>void) : void {
		assert listener !== null
		assert !(listener instanceof Class), "illegal argument type. Class is not allowed as listener."
		val hasCallback = new MutableBoolean(callback !== null)
		// Loop on listener's methods in order to retrieve the event types and loop
		// on a smaller set of entries from "this.evaluators"
		var methodIterator = new MethodIterator(listener)
		val mapper = getInternalEvaluatorMapper
		while (methodIterator.hasNext) {
			val method = methodIterator.next
			val registeredEvaluators = internalDataStructure.get(method.type)
			if (registeredEvaluators !== null) {

				val removables = newLinkedList

				// TODO: New implementation without two loops (for-loop and removeAll loop) may be more efficient
				for (registeredEvaluator : registeredEvaluators) {
					val target = mapper.apply(registeredEvaluator).target
					if (target === listener) {
						removables += registeredEvaluator
						if (hasCallback.get) {
							hasCallback.set(false)
							callback.apply(target)
						}
					}
				}

				registeredEvaluators.removeAll(removables)

					// TODO: Is the following behavior efficient?
					// don't try to remove the set if it's empty; that can't be done safely without a lock
					// anyway, if the set is empty it'll just be wrapping an array of length 0
			}
		}
	}

	/** 
	 * Description of an single guard evaluator.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	@Data
	private static class Evaluator {

		val type : Class<? extends Event>

		val methods : Collection<Method>		

	}
	
	/** Iterator on the guard evaluators that are declared into the provided listener.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class MethodIterator implements Iterator<Evaluator> {

		val listener : Object

		val methods : Iterator<Entry<Class<? extends Event>, Collection<Method>>>

		new (listener : Object) {
			this.listener = listener
			this.methods = this.listener.class.annotedMethodsPerEvent.entrySet.iterator
		}

		override hasNext : boolean {
			this.methods.hasNext
		}

		override next : Evaluator {
			val element = this.methods.next
			return new Evaluator(element.key, element.value)
		}

	}
	
}
