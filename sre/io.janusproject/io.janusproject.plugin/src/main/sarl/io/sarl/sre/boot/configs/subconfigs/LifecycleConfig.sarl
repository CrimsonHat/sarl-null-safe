/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.configs.subconfigs

import com.google.inject.AbstractModule
import com.google.inject.Module
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.meta.application.OptionMetadata
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.boot.configs.subconfigs.LifecycleConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the agent lifecycle management.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@BQConfig("Configuration of the lifecycle service")
class LifecycleConfig {

	/** 
	 * Prefix for the configuration entries of the lifecycle configuration.
	 */
	public static val PREFIX : String = ServicesConfig::PREFIX + ".lifecycle"

	/** 
	 * Name of property that indicates if agents must be created by an injector.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_VALUE
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_NAME = PREFIX + ".createAgentsWithInjector"
	
	/** 
	 * Indicates if the agents must be created with an injector by default.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_NAME
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_VALUE = false

	/** 
	 * Name of property that indicates the minimal duration (in millis) between the failing of
	 * an agent start and the stopping of the SRE kernel, if the failing agent is
	 * the first/last one.
	 * 
	 * @see #KERNEL_STOP_DELAY_ON_SPAWN_VALUE
	 */
	public static val KERNEL_STOP_DELAY_ON_SPAWN_NAME = PREFIX + ".kernelStopDelayOnSpawn"

	/** 
	 * Indicates the minimal duration (in millis) between the failing of
	 * an agent start and the stopping of the SRE kernel, if the failing agent is
	 * the first/last one.
	 * 
	 * @see #KERNEL_STOP_DELAY_ON_SPAWN_NAME
	 */
	public static val KERNEL_STOP_DELAY_ON_SPAWN_VALUE = 500

	/** 
	 * Name of property that indicates the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @see #AGENT_SPAWNING_COUNT_PER_THREAD_VALUE
	 */
	public static val AGENT_SPAWNING_COUNT_PER_THREAD_NAME = PREFIX + ".agentSpawningCountPerThread"

	/** 
	 * Indicates the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @see #AGENT_SPAWNING_COUNT_PER_THREAD_NAME
	 */
	public static val AGENT_SPAWNING_COUNT_PER_THREAD_VALUE = 128



	@Accessors(PUBLIC_GETTER)
	var createAgentsWithInjector : boolean = CREATE_AGENT_WITH_INJECTOR_VALUE

	@Accessors(PUBLIC_GETTER)
	var kernelStopDelayOnSpawn : int = KERNEL_STOP_DELAY_ON_SPAWN_VALUE

	@Accessors(PUBLIC_GETTER)
	var agentSpawningCountPerThread : int = AGENT_SPAWNING_COUNT_PER_THREAD_VALUE

	
	/** Change the flag that indicates if the agents must be created with injector, or not.
	 *
	 * @param useInjector is {@code true} if the agents should be created by an injector.
	 */
	@BQConfigProperty("Is agents created with the injection mechanism")
	def setCreateAgentsWithInjector(useInjector : boolean) : void {
		this.createAgentsWithInjector = useInjector
	}

	/** Change the minimal duration (in millis) between the failing of
	 * an agent start and the stopping of the SRE kernel, if the failing agent is
	 * the first/last one.
	 * 
	 * @param duration the duration in millis.
	 * @since 0.11
	 */
	@BQConfigProperty("Delay to stop the kernel after an agent spawn has failed")
	def setKernelStopDelayOnSpawn(duration : int) : void {
		this.kernelStopDelayOnSpawn = if (duration > 0) duration else 0
	}

	/** Change the maximal number of agents that could be spawn by a single
	 * thread of the lifecycle service. This value is used to create threads that are spawning
	 * blocks of agents.
	 * 
	 * @param number is the number of agent to be spawned.
	 * @since 0.11
	 */
	@BQConfigProperty("Maximum number of agents to be spawn by a single thread")
	def setAgentSpawningCountPerThread(number : int) : void {
		this.agentSpawningCountPerThread = if(number > 0) number else 1
	}

}

/** 
 * Module for the agent lifecycle configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class LifecycleConfigModule extends AbstractModule {

	static val INJECTAGENT_OPTION = "inject-agents"

	static val KERNELSTOPTIMEOUTONSPAWN_OPTION = "kernel-stop-delay-on-spawn"

	static val AGENTSPAWNINGCOUNTPERTHREAD = "agent-spawns-per-thread"
	
	override configure : void {
		VariableDecls::extend(binder).declareVar(CREATE_AGENT_WITH_INJECTOR_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(INJECTAGENT_OPTION,
				MessageFormat::format(Messages::LifecycleConfigModule_0, CREATE_AGENT_WITH_INJECTOR_VALUE))
			.valueRequired(Messages::LifecycleConfigModule_1).build).mapConfigPath(INJECTAGENT_OPTION,
			CREATE_AGENT_WITH_INJECTOR_NAME)

		VariableDecls::extend(binder).declareVar(KERNEL_STOP_DELAY_ON_SPAWN_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(KERNELSTOPTIMEOUTONSPAWN_OPTION,
				MessageFormat::format(Messages::LifecycleConfigModule_2, KERNEL_STOP_DELAY_ON_SPAWN_VALUE)).valueRequired(
				Messages::LifecycleConfigModule_3).build).mapConfigPath(KERNELSTOPTIMEOUTONSPAWN_OPTION,
			KERNEL_STOP_DELAY_ON_SPAWN_NAME)

		VariableDecls::extend(binder).declareVar(AGENT_SPAWNING_COUNT_PER_THREAD_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(AGENTSPAWNINGCOUNTPERTHREAD,
				MessageFormat::format(Messages::LifecycleConfigModule_4, AGENT_SPAWNING_COUNT_PER_THREAD_VALUE)).valueRequired(
				Messages::LifecycleConfigModule_5).build).mapConfigPath(AGENTSPAWNINGCOUNTPERTHREAD,
			AGENT_SPAWNING_COUNT_PER_THREAD_NAME)
	}

}

/** Provider of the module for the agent lifecycle configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class LifecycleConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new LifecycleConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(LifecycleConfig))
	}
	
	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LifecycleConfigModuleProvider_0);
	}

}
