/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.configs.subconfigs

import com.google.inject.AbstractModule
import com.google.inject.Module
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.meta.application.OptionMetadata
import java.lang.reflect.Type
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.boot.configs.subconfigs.LifecycleConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the agent lifecycle management.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
@BQConfig("Configuration of the lifecycle service")
class LifecycleConfig {

	/** 
	 * Prefix for the configuration entries of the lifecycle configuration.
	 */
	public static val PREFIX : String = ServicesConfig::PREFIX + ".lifecycle"

	/** 
	 * Name of property that indicates if agents must be created by an injector.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_VALUE
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_NAME = PREFIX + ".createAgentsWithInjector"
	
	/** 
	 * Indicates if the agents must be created with an injector by default.
	 * 
	 * @see #CREATE_AGENT_WITH_INJECTOR_NAME
	 */
	public static val CREATE_AGENT_WITH_INJECTOR_VALUE = false



	@Accessors(PUBLIC_GETTER)
	var createAgentsWithInjector : boolean = CREATE_AGENT_WITH_INJECTOR_VALUE

	/** Change the flag that indicates if the agents must be created with injector, or not.
	 *
	 * @param useInjector is {@code true} if the agents should be created by an injector.
	 */
	@BQConfigProperty("Is agents created with the injection mechanism")
	def setCreateAgentsWithInjector(useInjector : boolean) : void {
		this.createAgentsWithInjector = useInjector
	}

}

/** 
 * Module for the agent lifecycle configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class LifecycleConfigModule extends AbstractModule {

	static val XINJECTAGENT_OPTION = "injectagents"

	override configure : void {
		VariableDecls::extend(binder).declareVar(CREATE_AGENT_WITH_INJECTOR_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(XINJECTAGENT_OPTION, Messages::LifecycleConfigModule_0).valueRequired(
				Messages::LifecycleConfigModule_1).build).mapConfigPath(XINJECTAGENT_OPTION, CREATE_AGENT_WITH_INJECTOR_NAME)
	}

}

/** Provider of the module for the agent lifecycle configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.11
 */
class LifecycleConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new LifecycleConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(LifecycleConfig))
	}
	
	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LifecycleConfigModuleProvider_0);
	}

}
