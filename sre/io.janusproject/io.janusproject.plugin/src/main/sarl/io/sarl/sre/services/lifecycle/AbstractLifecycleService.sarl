/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.boot.configs.subconfigs.LifecycleConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.AbstractSreService
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.executor.Runnables
import io.sarl.sre.services.logging.LoggingService
import java.lang.ref.WeakReference
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicReference
import java.util.concurrent.locks.ReentrantLock
import java.util.logging.Level
import javax.inject.Provider
import javax.inject.Singleton
import org.eclipse.xtext.xbase.lib.Functions.Function0

import static io.sarl.sre.services.lifecycle.AgentLife.*
import static java.text.MessageFormat.*

/** 
 * Implementation of a spawning service that is based on the other services of the SRE platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
abstract class AbstractLifecycleService extends AbstractSreService implements LifecycleService {

	val globalListeners : SmartListenerCollection<?>

	val sarlSpecificationChecker : SarlSpecificationChecker

	val agentCreatorProvider : AgentCreatorProvider

	val skillUninstaller : SkillUninstaller

	val logger : LoggingService

	val platformLifecycleEventEmitter : LifecycleServiceListener

	val platformContextEventEmitter : ExternalContextMemberListener

	val executor : ExecutorService

	val lifecycleConfig : LifecycleConfig

	var userDynamicSkillProviders : ConcurrentLinkedDeque<DynamicSkillProvider>

	val spawnQueries = new AtomicLong

	val spawnEnable = new AtomicBoolean(true)

	/** 
	 * This lock is very important, it corrects the bug detected in the boids simulation and SARL Benchmarks
	 * In particular, the number of calls to the spawn function was not coherent with the corresponding number of strong agents spawned in the defaultcontext.defaultspace
	 * Both lock on agentCreatorProvider.getAgentCreator and life.start are REQUIRED
	 */
	val lock : ReentrantLock = new ReentrantLock

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lockProvider the provider of locks.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param lifecycleConfig the configuration of the lifecycle service.
	 * @param logger the logging service.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider,
		globalListeners : SmartListenerCollection<?>, lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>, skillUninstaller : SkillUninstaller,
		executor : ExecutorService, logger : LoggingService, lifecycleConfig : LifecycleConfig) {
		this.sarlSpecificationChecker = sarlSpecificationChecker
		this.agentCreatorProvider = creator
		this.globalListeners = globalListeners
		this.skillUninstaller = skillUninstaller
		this.executor = executor
		this.lifecycleConfig = lifecycleConfig
		this.logger = logger
		this.platformLifecycleEventEmitter = lifecycleListener.get
		this.platformContextEventEmitter = externalContextListener.get
	}

	override getSpawnEnable : boolean {
		spawnEnable.get
	}

	override setSpawnEnable(enable : boolean) {
		spawnEnable.set(enable)
	}
	
	/** Replies the backend logging service.
	 * 
	 * @return the logging service.
	 */
	protected def getLoggingService : LoggingService {
		this.logger
	}

	protected def onStart {
		this.platformLifecycleEventEmitter.addLifecycleServiceListener
	}

	protected def onStop {
		this.platformLifecycleEventEmitter.removeLifecycleServiceListener
	}

	def addLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.add(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def removeLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.remove(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def addKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.add(typeof(KernelAgentLifecycleListener), listener)
	}

	def removeKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.remove(typeof(KernelAgentLifecycleListener), listener)
	}

	/** Notify the listeners outside the parent context.
	 * 
	 * @param agents the destroyed agent.
	 * @param outerContexts the contexts in which the agent w destroyed.
	 */
	protected def fireAgentDestroy(^agent : Agent, outerContexts : ConcurrentLinkedDeque<ContextReference>) {
		// Notify the listeners on the spawn events (not restricted to a single agent)
		this.globalListeners.notifyListeners(typeof(LifecycleServiceListener)) [
			agentDestroyed(^agent, outerContexts)
		]
	}

	/** Notify the listeners outside the parent context.
	 * 
	 * @param spawningAgent the spawning agent.
	 * @param context the context in which the agents were spawned.
	 * @param agentClazz the type of the spawned agents.
	 * @param agent the spawned agent.
	 * @param initializationParameters the initialization parameters.
	 */
	protected def fireAgentSpawned(spawningAgent : UUID, context : Context, agentClazz : Class<? extends Agent>,
		^agent : Agent, initializationParameters : Object*) {
		this.globalListeners.notifyListeners(typeof(LifecycleServiceListener)) [
			agentSpawned(spawningAgent, context, agentClazz, ^agent, initializationParameters)
		]
	}

	/** 
	 * Notifies the listeners about the kernel agent destruction.
	 */
	protected def fireKernelAgentDestroy {
		this.globalListeners.notifyListeners(typeof(KernelAgentLifecycleListener)) [
			kernelAgentDestroyed
		]
	}

	final override spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context, agentId : UUID,
		agentClazz : Class<? extends Agent>, params : Object[]) {
		spawnAgent(nbAgents, spawningAgent, parent, agentClazz, params, new AgentIdProvider(agentId))
	}

	/** 
	 * A dynamic provider of UUID for the newly created agents.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	private static class AgentIdProvider implements Function0<UUID> {

		var agentId : AtomicReference<UUID>

		new (agentId : UUID) {
			if (agentId === null) {
				this.agentId = null
			} else {
				this.agentId = new AtomicReference(agentId)
			}
		}

		def apply : UUID {
			val id = this.agentId?.getAndSet(null)
			if (id === null) {
				return UUID::randomUUID
			}
			return id
		}

	}

	/** Replies if the service can spawn.
	 * 
	 * @return {@code true} if the service can spawn an agent.
	 */
	def canSpawnAgent : boolean {
		isRunning && getSpawnEnable
	}

	/** 
	 * Spawn agents of the given type, and pass the parameters to its initialization function.
	 * 
	 * <p>This function is not blocking until all the agents are spawned.
	 * 
	 * @param nbAgents the number of agents to spawn.
	 * @param spawningAgent the agent which is spawning.
	 * @param parent the parent entity that is creating the agents.
	 * @param agentId the identifier of the agent to spawn. If {@code null} the identifier is randomly selected.
	 * If {@code nbAgents} is greater than 1, the agent identifier must be {@code null}.
	 * @param agentClazz the type of the agents to spawn.
	 * @param callback function that is invoked when an identifier of spawned agent is known. The number of times this callback
	 * is invoked depends on the service's implementation. But, the contract is that is must be called at least one time when
	 * one or more agent is spawned.
	 * @param params the list of the parameters to pass to the agent initialization function.
	 * @param agentIds is the lambda that must be used to compute the UUID of an agent.
	 */
	protected def spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context,
		agentClazz : Class<? extends Agent>, params : Object[], agentIds : ()=>UUID) : void {
		if (canSpawnAgent && nbAgents > 0) {

			// Check if the version of the SARL agent class is compatible.
			if (this.sarlSpecificationChecker === null ||
				!this.sarlSpecificationChecker.isValidSarlElement(agentClazz)) {
				throw new InvalidSarlSpecificationException(agentClazz)
			}

			val spawnQueryAccess = new SpawnQueries(this)
			this.lock.lock
			// Create the shared injector that is also able to create the agent instance.
			val agentInstanceCreator = this.agentCreatorProvider.getAgentCreator(agentClazz, parent.ID, nbAgents,
				dynamicSkillProviders)
			this.lock.unlock
			// Create the block of code for creating a single agent
			val agentCreator : Runnable = [

				val aid = agentIds.apply
				// Effectively create the agent
				val ^agent = agentInstanceCreator.apply(aid)

				if (^agent === null) {
					throw new CannotSpawnException(agentClazz)
				}

				// Start the agent's life
				var life = getLife(^agent)
				var started = false
				var spawnError : Throwable = null
				this.lock.lock
				try {
					started = life.start(this.skillUninstaller, getLoggingService, spawningAgent, parent, params)
				} catch (e : Throwable) {
					started = false
					spawnError = new CannotSpawnException(agentClazz, e)
				} finally {
					spawnQueryAccess.done
					this.lock.unlock
				}
				if (started) {
					// Add the agent in the system. It is synchronized because additions may occur in parallel
					^agent.onAgentCreated
					fireAgentSpawningEvents(spawningAgent, parent, agentClazz, params, ^agent)
				} else {
					if (spawnError !== null) {
						loggingService.kernelLogger.log(Level::SEVERE, spawnError.message, spawnError)
					}
					fireAgentSpawningErrorEvents(spawningAgent, parent, agentClazz)
					// The agent may be the boot agent, and it may have failed to be launched.
					// When the root context is still empty the safer decision should be to stop the kernel.
					// In some cases, the agent that is just not started has spawned another agent
					// into its "on Initialize" before it returns on failure or with "killMe".
					// Then, we should give the opportunity to the spawned sub-agent to properly
					// start before stopping the SRE.
					parent.startShutdownLookup
				}

			]
			if (nbAgents > 1) {
				this.executor.executeNotBlockingTask(loggingService.kernelLogger, nbAgents,
					this.lifecycleConfig.agentSpawningCountPerThread, agentCreator)
			} else {
				this.executor.executeAsap(loggingService.kernelLogger, agentCreator)
			}
		} else {
			throw new SpawnDisabledException(parent.ID, agentClazz)
		}
	}

	private def startShutdownLookup(parent : Context) {
		val lookup = new ShutdownLookUp(this, parent)
		lookup.start
	}

	/** This function is called each time the agent framework should be stopped.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function fires the kernel agent
	 * destruction event.
	 * 
	 * @since 0.8.0
	 */
	protected def onAgentFrameworkStop {
		fireKernelAgentDestroy
	}

	/** This function is called each time an agent was created.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function does nothing.
	 * 
	 * @param agent the spawned agent.
	 * @since 0.8.0
	 */
	protected def onAgentCreated(^agent : Agent) {
		//
	}

	/** Fire the events related to the agent spawn.
	 * 
	 * @param spawningAgent the creator.
	 * @param parent the context in which the agents are created.
	 * @param agentClazz the type of the spawned agents.
	 * @param spawnedAgent the spawned agent.
	 */
	protected def fireAgentSpawningEvents(spawningAgent : UUID, parent : Context, agentClazz : Class<? extends Agent>,
		params : Object[], spawnedAgent : Agent) {
		spawningAgent.fireAgentSpawned(parent, agentClazz, spawnedAgent, params)
		val spaceID = parent.defaultSpace.spaceID
		this.platformContextEventEmitter.memberJoined(parent, spaceID, spawnedAgent.ID, agentClazz.name)
	}

	/** Fire the events related a failure of agent spawn.
	 * 
	 * @param spawningAgent the creator.
	 * @param parent the context in which the agents are created.
	 * @param agentClazz the type of the spawned agents.
	 */
	protected def fireAgentSpawningErrorEvents(spawningAgent : UUID, parent : Context,
		agentClazz : Class<? extends Agent>) {
		this.platformLifecycleEventEmitter.agentSpawnFailure(spawningAgent, parent, agentClazz)
	}

	/** Replies if the given context is the root context and is empty.
	 * 
	 * @param context the agent context to test.
	 * @return {@code true} if the given context is the root context, and it is empty.
	 * @Otherwise {@code false}.
	 */
	protected def isEmptyRootContext(context : Context) {
		context !== null && context.rootContext && context.defaultSpace.isPseudoEmpty
	}

	/** Replies if the given agent could be kill according to the SARL specification.
	 * 
	 * <p>An agent could be kill if is has no internal member.
	 * 
	 * @param life the internal data structure for the agent.
	 * @param id the identifier of the agent.
	 * @return {@code true} if the agent could be killed.
	 */
	def isKillableAgent(life : AgentLife, id : UUID) : boolean {
		if (life !== null) {
			try {
				var innerContext = life.getInnerContext(null)
				if (innerContext !== null) {
					if (!innerContext.defaultSpace.isPseudoEmpty(id)) {
						return false
					}
				}
				return true
			} catch (exception : Throwable) {
				//
			}
		}
		return false
	}

	/** Replies if the agent is alive. This function is usually invoked to determine if the agent is killable.
	 * 
	 * @param life the internal data structure for the agent.
	 * @return {@code true} if the agent is alive.
	 * @since 0.11
	 */
	def isAlive(life : AgentLife) : boolean {
		life.state.isAlive
	}

	def killAgent(^agent : Agent, forceKillable : boolean) : boolean {
		val agentId = ^agent.ID
		val life = getLifeOrNull(^agent)
		if (life !== null && life.isAlive) {
			// We should check if it is possible to kill the agent BEFORE killing it.
			if (forceKillable || life.isKillableAgent(agentId)) {
				var defaultContext = life.defaultContext
				var contexts = life.stop(this.skillUninstaller, getLoggingService)
				^agent.onAgentKilled
				fireAgentDestructionEvents(^agent, defaultContext, contexts)
				// Test if the agent is the latest on this kernel.
				defaultContext?.context?.startShutdownLookup
				return true
			} else {
				this.loggingService.kernelLogger.warning [
					format(Messages::AbstractLifecycleService_1, agentId)
				]
			}
		} else {
			this.loggingService.kernelLogger.warning [
				format(Messages::AbstractLifecycleService_2, agentId)
			]
		}
		return false
	}

	/** This function is called each time an agent was killed.
	 * This function is provided for being overridden by the sub-classes of
	 * the current class.
	 * 
	 * <p>Within the {@code AbstractLifecycleService}, this function does nothing.
	 * 
	 * @param agent the killed agent.
	 * @since 0.8.0
	 */
	protected def onAgentKilled(^agent : Agent) {
		//
	}

	protected def fireAgentDestructionEvents(^agent : Agent, defaultContextBeforeKilled : ContextReference,
		leavedContexts : ConcurrentLinkedDeque<ContextReference>) {
		// Leave the default context because the ExternalContextAccessSkill does not fire events related
		// to the default space.
		this.platformContextEventEmitter.memberLeft(defaultContextBeforeKilled.context,
			defaultContextBeforeKilled.defaultSpace.spaceID, ^agent.ID, ^agent.class.name)
		// Fire the agent destroy event
		^agent.fireAgentDestroy(leavedContexts)
	}

	/** Replies the dynamic skill providers that are defined by the user of the service.
	 */
	protected def getDynamicSkillProviders : ConcurrentLinkedDeque<DynamicSkillProvider> {
		if (this.userDynamicSkillProviders === null) {
			return new ConcurrentLinkedDeque<DynamicSkillProvider>()
		}
		return new ConcurrentLinkedDeque<DynamicSkillProvider>(this.userDynamicSkillProviders)
	}

	/** Add a dynamic skill provider that must be used for the agents that are spawned
	 * after the call to this function.
	 * 
	 * @param provider is the provider of skills for newly created agents.
	 */
	def addDynamicSkillProvider(provider : DynamicSkillProvider) {
		assert provider !== null

		if (this.userDynamicSkillProviders === null) {
			this.userDynamicSkillProviders = new ConcurrentLinkedDeque<DynamicSkillProvider>
		}
		this.userDynamicSkillProviders += provider

	}

	/** Remove a dynamic skill provider that must be not be used any more for the agents that are spawned.
	 * 
	 * @param provider is the provider of skills to be removed.
	 */
	def removeDynamicSkillProvider(provider : DynamicSkillProvider) {
		assert provider !== null
		var list : ConcurrentLinkedDeque<DynamicSkillProvider> = this.userDynamicSkillProviders
		if (list !== null) {
			this.userDynamicSkillProviders.remove(provider)
			if (this.userDynamicSkillProviders.empty) {
				this.userDynamicSkillProviders = null
			}
		}
	}

	/** 
	 * A class enables to update the number of "spawn" queries and supporting the
	 * multiple spawning of agents within a single call to "spawn".
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	private static class SpawnQueries {

		val enclosing : WeakReference<AbstractLifecycleService>

		val used = new AtomicBoolean(false)

		new (enclosing : AbstractLifecycleService) {
			enclosing.spawnQueries.incrementAndGet
			this.enclosing = new WeakReference(enclosing)
		}

		def done : void {
			if (!this.used.getAndSet(true)) {
				var ec = this.enclosing.get
				if (ec !== null) {
					ec.spawnQueries.accumulateAndGet(-1) [
						var nv = $0 + $1
						if (nv < 0) {
							return 0
						}
						return nv
					]
				}
			}
		}

	}

	/** 
	 * A class that is looking for stopping the SRE kernel when o more agent is alive.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	private static class ShutdownLookUp implements Runnable {

		val enclosing : WeakReference<AbstractLifecycleService>

		val parent : Context

		package new (enclosing : AbstractLifecycleService, parent : Context) {
			this.enclosing = new WeakReference(enclosing)
			this.parent = parent
		}

		@SuppressWarnings("discouraged_reference")
		def run {
			val ec = this.enclosing.get
			if (ec !== null) {
				val nb = ec.spawnQueries.get
				if (nb === 0 && ec.isEmptyRootContext(this.parent)) {
					ec.onAgentFrameworkStop
				}
			}
		}

		def start : void {
			Runnables::named(this, Messages::AbstractLifecycleService_0).run
		}

	}

}

/** 
 * This exception is thrown when the agent to spawn is not generated according to a valid SARL specification version.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class InvalidSarlSpecificationException extends RuntimeException {

	new (agentType : Class<? extends Agent>) {
		super(format(Messages::InvalidSarlSpecificationException_0, agentType.name))
	}

}

/** 
 * This exception is thrown when the spawning service of agents is disabled.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SpawnDisabledException extends RuntimeException {

		/** 
		 * @param parentID
		 * - the identifier of the parent entity that is creating the agent.
		 * @param agentClazz
		 * - the type of the agent to spawn.
		 */
	new (parentID : UUID, agentClazz : Class<? extends Agent>) {
		super(format(Messages.SpawnDisabledException_0, parentID, agentClazz));
	}

}
