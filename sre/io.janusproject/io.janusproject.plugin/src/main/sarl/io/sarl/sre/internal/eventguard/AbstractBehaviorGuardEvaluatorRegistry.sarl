/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.internal.eventguard

import io.sarl.lang.core.Event
import io.sarl.sre.internal.MutableBoolean
import io.sarl.sre.internal.ObjectComparator
import java.util.Set
import java.util.TreeSet
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ConcurrentSkipListSet
import java.util.concurrent.CopyOnWriteArraySet

import static extension io.sarl.sre.internal.eventguard.reflect.StaticReflectBehaviorGuardEvaluatorDictionary.*

/** 
 * Registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a
 * given behavior (on clause in SARL behavior).
 * 
 * <p>This class is thread-safe.
 *
 * @param <T> the type of stored data.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractBehaviorGuardEvaluatorRegistry<T> implements IBehaviorGuardEvaluatorRegistry {

	/** Replies the internal data structure.
	 *
	 * @return the internal data structure
	 */
	@Pure
	abstract def getInternalDataStructure : ConcurrentHashMap<Class<? extends Event>, CopyOnWriteArraySet<T>>

	/** Replies the mapper from the internal guard evaluator description to the public description.
	 * 
	 * @return the internal data structure
	 */
	@Pure
	protected abstract def getInternalEvaluatorMapper : (T)=>IBehaviorGuardEvaluator

	/** Replies the filtering of evaluator.
	 * 
	 * @return the filter
	 */
	@Pure
	protected abstract def getInternalEvaluatorFilter : (T, Event)=>boolean

	override unregisterAll(callback : (Object)=>boolean) : void {
		val removedListeners = new TreeSet(ObjectComparator::SINGLETON)
		if (callback !== null) {
			val hasCallback = new MutableBoolean(true)
			val iterator0 = internalDataStructure.values.iterator
			val mapper = getInternalEvaluatorMapper
			while (hasCallback.get && iterator0.hasNext) {
				val iterator1 = iterator0.next.iterator
				while (hasCallback.get && iterator1.hasNext) {
					val evaluator = iterator1.next
					val target = mapper.apply(evaluator).target
					if (removedListeners.add(target)) {
						val continueCallbacks = callback.apply(target)
						if (!continueCallbacks) {
							hasCallback.set(false)
						}
					}
				}
			}
		}
		// TODO: Is it the most efficient way to clear the map?
		internalDataStructure.clear
	}

	override unregister(listenerType : Class<?>, callback : (Object)=>boolean) {
		assert listenerType !== null
		val notifiedListeners = new TreeSet(ObjectComparator::SINGLETON)
		val hasCallback = new MutableBoolean(callback !== null)
		val mapper = getInternalEvaluatorMapper
		for (guardedEvaluators : internalDataStructure.values) {
			guardedEvaluators.removeIf [
				val target = mapper.apply(it).target
				assert target !== null
				if (listenerType.isInstance(target)) {
					if (hasCallback.get && notifiedListeners.add(target)) {
						val continueCalls = callback.apply(target)
						if (!continueCalls) {
							hasCallback.set(false)
						}
					}
					return true
				}
				return false
			]

			// TODO: Is the following behavior efficient?
			// don't try to remove the set if it's empty; that can't be done safely without a lock
			// anyway, if the set is empty it'll just be wrapping an array of length 0
		}
	}

	@Pure
	override hasRegisteredEventListener(type : Class<?>) : boolean {
		if (type !== null) {
			val mapper = getInternalEvaluatorMapper
			for (guardedEvaluators : internalDataStructure.values) {
				for (evaluator : guardedEvaluators) {
					if (type.isInstance(mapper.apply(evaluator).target)) {
						return true
					}
				}
			}
		}
		return false
	}

	@Pure
	override getBehaviorGuardEvaluators(^event : Event) : ConcurrentLinkedDeque<? extends IBehaviorGuardEvaluator> {
		assert ^event !== null
		val eventTypes = ^event.class.flattenHierarchy
		val allEvaluators : ConcurrentLinkedDeque<IBehaviorGuardEvaluator> = new ConcurrentLinkedDeque
		val mapper = getInternalEvaluatorMapper
		val filter = getInternalEvaluatorFilter
		for (eventType : eventTypes) {
			val eventSubscribers = internalDataStructure.get(eventType)
			if (eventSubscribers !== null) {
				for (guardedEvaluator : eventSubscribers) {
					if (filter.apply(guardedEvaluator, ^event)) {
						allEvaluators += mapper.apply(guardedEvaluator)
					}
				}
			}
		}
		return allEvaluators
	}

	@Pure
	override getBehaviorGuardEvaluatorsFor(^event : Event,
		listener : Object) : ConcurrentLinkedDeque<? extends IBehaviorGuardEvaluator> {
		assert ^event !== null
		assert listener !== null
		val allEvaluators : ConcurrentLinkedDeque<IBehaviorGuardEvaluator> = new ConcurrentLinkedDeque
		val eventTypes = ^event.class.flattenHierarchy
		val mapper = getInternalEvaluatorMapper
		for (eventType : eventTypes) {
			val eventSubscribers = internalDataStructure.get(eventType)
			if (eventSubscribers !== null) {
				for (guardedEvaluator : eventSubscribers) {
					val target = mapper.apply(guardedEvaluator).target
					if (target === listener) {
						allEvaluators += mapper.apply(guardedEvaluator)
					}
				}
			}
		}
		return allEvaluators
	}

	override getRegisteredEventListeners(type : Class<TT>, collection : Set<? super TT>) : int with TT {
		assert type !== null
		assert collection !== null
		var nb = 0
		val mapper = getInternalEvaluatorMapper
		for (guardedEvaluators : internalDataStructure.values) {
			for (evaluator : guardedEvaluators) {
				val target = mapper.apply(evaluator).target
				if (type.isInstance(target)) {
					if (collection += type.cast(target)) {
						nb++
					}
				}
			}
		}
		return nb
	}

	@Pure
	override getRegisteredEventListeners(type : Class<TT>) : ConcurrentSkipListSet<TT> with TT {
		var result : ConcurrentSkipListSet<TT> = new ConcurrentSkipListSet(ObjectComparator::SINGLETON)
		getRegisteredEventListeners(type, result)
		return result
	}

}
