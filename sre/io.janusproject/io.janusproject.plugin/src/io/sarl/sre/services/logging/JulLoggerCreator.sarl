/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.logging

import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.LoggingConfig
import java.io.PrintStream
import java.util.logging.Formatter
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Provider

/** 
 * Helper for creating a JUL logger.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class JulLoggerCreator {

	val defaultLevel : Level

	val loggerProvider : Provider<Logger>

	val configProvider : Provider<SreConfig>

	var config : LoggingConfig

	var defaultProgramName : String

	var consoleFormatter : Formatter

	var platformFormatter : Formatter

	/** Build a logger creator.
	 *
	 * @param defaultLevel the logging level for new loggers.
	 * @param loggerProvider the provider of loggers.
	 * @param configProvider the provider of SRE configuration.
	 */
	new (defaultLevel : Level, loggerProvider : Provider<Logger>, configProvider : Provider<SreConfig>) {
		this.defaultLevel = defaultLevel
		this.loggerProvider = loggerProvider
		this.configProvider = configProvider
	}

	/** Replies the log formatter for the console messages.
	 *
	 * @return the log formatter, never {@code null}.
	 */
	synchronized def getConsoleFormatter : Formatter {
		if (this.consoleFormatter === null) {
			this.consoleFormatter = createConsoleFormatter
		}
		return this.consoleFormatter
	}

	/** Change the log formatter for the console messages.
	 * 
	 * @param formatter the log formatter, or {@code null} to use the default.
	 */
	synchronized def setConsoleFormatter(formatter : Formatter) {
		this.consoleFormatter = formatter
	}

	/** Create a formatter for the console messages.
	 *
	 * @return the newly created instance of formatter.
	 */
	protected def createConsoleFormatter : Formatter {
		new JulPatternFormatter(this.loggingConfig.platformMessageFormat)
	}

	/** 
	 * Create a logger with the given output for the console.
	 * 
	 * @param name the name of the new logger.
	 * @param output the output.
	 * @return the logger.
	 * @since 0.7.0
	 */
	def createConsoleLogger(name : String, output : PrintStream) : Logger {
		val logger = this.loggerProvider.get
		val nhandler = new JulOutputStreamConsoleHandler(output, getConsoleFormatter)
		var allHandlers = logger.handlers
		if (allHandlers !== null) {
			for (handler : allHandlers) {
				logger.removeHandler(handler)
			}
		}
		logger.addHandler(nhandler)
		logger.useParentHandlers = false
		logger.level = this.defaultLevel
		return logger
	}

	/** Replies the log formatter for the SRE kernel.
	 * 
	 * @return the log formatter, never {@code null}.
	 */
	synchronized def getPlatformFormatter : Formatter {
		if (this.platformFormatter === null) {
			this.platformFormatter = createPlatformFormatter
		}
		return this.consoleFormatter
	}

	/** Change the log formatter for the SRE kernel.
	 * 
	 * @param formatter the log formatter, or {@code null} to use the default.
	 */
	synchronized def setPlatformFormatter(formatter : Formatter) {
		this.consoleFormatter = formatter
	}

	/** Create a formatter for the SRE kernel.
	 * 
	 * @return the newly created instance of formatter.
	 */
	protected def createPlatformFormatter : Formatter {
		new JulPatternFormatter(this.loggingConfig.platformMessageFormat)
	}

	protected def getLoggingConfig : LoggingConfig {
		if (this.config === null) {
			this.config = this.configProvider.get.services.logging
		}
		return this.config
	}

	protected def getProgramName : String {
		if (this.defaultProgramName.isNullOrEmpty) {
			this.defaultProgramName = this.configProvider.get.boot.programName
		}
		return this.defaultProgramName
	}
	
	/** 
	 * Create a logger for the platform.
	 * 
	 * @return the logger.
	 * @since 0.7.0
	 */
	def createPlatformLogger() : Logger {
		val logger = this.loggerProvider.get
		val stderr = new JulStandardErrorOutputConsoleHandler(getPlatformFormatter)
		stderr.level = Level::ALL
		val stdout = new JulStandardOutputConsoleHandler(getPlatformFormatter)
		stdout.level = Level::ALL
		var allHandlers = logger.handlers
		if (allHandlers !== null) {
			for (handler : allHandlers) {
				logger.removeHandler(handler)
			}
		}
		logger.addHandler(stderr)
		logger.addHandler(stdout)
		logger.useParentHandlers = false
		logger.level = Level::ALL
		return logger
	}

	/** 
	 * Create a logger with the given name for a platform module (kernel or agent).
	 * 
	 * @param name the name of the new logger. If {@code null}, the default program name is used.
	 * @param parent the parent logger.
	 * @return the logger.
	 * @since 0.7.0
	 */
	def createModuleLogger(name : String = null, parent : Logger) : Logger {
		val thename = if (name.isNullOrEmpty) {
			this.programName
		} else {
			name
		}
		val logger = Logger::getLogger(thename)
		if (parent !== null) {
			logger.parent = parent
		}
		logger.useParentHandlers = true
		logger.level = this.defaultLevel
		return logger
	}

}
