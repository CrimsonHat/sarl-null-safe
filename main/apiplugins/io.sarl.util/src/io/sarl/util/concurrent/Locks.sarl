/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.util.concurrent

import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock
import java.util.concurrent.locks.ReentrantLock
import java.util.concurrent.locks.ReentrantReadWriteLock

import com.google.inject.Provider

/** Utilities functions for creating locks.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
final class Locks {

	private new {
	}

	static var readWriteProvider : Provider<ReadWriteLock>

	static var provider : Provider<Lock>

	/** Change the read-write lock factory.
	 *
	 * @param factory the new factory. If {@code null}, restore the default provider.
	 */
	 static def setReadWriteLockProvider(factory : Provider<ReadWriteLock>) {
	 	readWriteProvider = factory
	 }

	/** Change the read-write lock factory.
	 *
	 * @param factory the new factory.
	 */
	 static def getReadWriteLockProvider : Provider<ReadWriteLock> {
	 	if (readWriteProvider === null) {
	 		readWriteProvider = [ new ReentrantReadWriteLock ]
	 	}
	 	readWriteProvider
	 }

	/** Change the lock factory.
	 *
	 * @param factory the new factory. If {@code null}, restore the default provider.
	 */
	 static def setLockProvider(factory : Provider<Lock>) {
	 	provider = factory
	 }

	/** Change the lock factory.
	 *
	 * @param factory the new factory.
	 */
	 static def getLockProvider : Provider<Lock> {
	 	if (provider === null) {
	 		provider = [ new ReentrantLock ]
	 	}
	 	provider
	 }

}
