<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>io.sarl.eclipse</groupId>
		<artifactId>sarl-eclipse-plugins</artifactId>
		<version>0.13.0-SNAPSHOT</version>
	</parent>
	
	<artifactId>io.sarl.eclipse.sre.janus</artifactId>
	<packaging>eclipse-plugin</packaging>
	<name>Janus for Eclipse</name>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>compute-janus-dependency-plugins</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<scripts>
						<script>
<![CDATA[
import java.nio.file.Paths
import java.util.jar.Manifest
import java.io.FileInputStream
import java.util.regex.Pattern

sourceManifest = Paths.get(project.basedir.absolutePath, "META-INF", "MANIFEST.MF").toFile()						
manifest = new Manifest(new FileInputStream(sourceManifest))
list = manifest.mainAttributes.getValue("Require-Bundle")
janusBundle = ''
janusDeps = new ArrayList()
networkDeps = new ArrayList()
def versionPattern = ~/^\s*(?<depName>.+?)(?:\s*;\s*[^=]+\s*=\s*".*?")?(?:\s*,\s*(?<endofs>.*))?$/
def versionMatcher = list =~ versionPattern
while (versionMatcher != null && versionMatcher.find()) {
	String depName = versionMatcher.group('depName')
	list = versionMatcher.group('endofs')
	if (depName) {
		if (depName.contains("janus.kernel")) {
			janusBundle = depName
			janusDeps.add(depName)
		} else if (depName.contains("janus.network")) {
			networkDeps.add(depName)
		} else {
			janusDeps.add(depName)
		}
	}
	if (list) {
		versionMatcher = list =~ versionPattern
	} else {
		versionMatcher = null
	}
}

listFile = Paths.get(project.basedir.absolutePath, "src", "io", "sarl", "eclipse", "sre", "janus", "buildpath", "janus-bundles.properties").toFile()
output = new FileWriter(listFile)
output.write("# This file is automatically generated by Maven. Please do not edit manually.\n")
output.write("JANUS_MAIN_BUNDLE = ")
output.write(janusBundle)
output.write("\n")
output.write("JANUS_BUNDLES = ")
first = true
for (String dep : janusDeps) {
	if (first) {
		first = false
	} else {
		output.write(", ")
	}
	output.write(dep)
}
output.write("\n")
output.close()

listFile = Paths.get(project.basedir.absolutePath, "src", "io", "sarl", "eclipse", "sre", "janus", "network", "janus-network-bundles.properties").toFile()
output = new FileWriter(listFile)
output.write("# This file is automatically generated by Maven. Please do not edit manually.\n")
output.write("JANUS_NETWORK_BUNDLES = ")
first = true
for (String dep : networkDeps) {
	if (first) {
		first = false
	} else {
		output.write(", ")
	}
	output.write(dep)
}
output.write("\n")
output.close()
]]>
						</script>
					</scripts>
				</configuration>
		        <dependencies>
					<dependency>
						<groupId>org.apache.groovy</groupId>
						<artifactId>groovy-all</artifactId>
						<type>pom</type> 
						<version>4.0.12</version>
					</dependency>
		        </dependencies>
			</plugin>
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.3</version>
				<executions>
					<execution>
						<id>prepare-eclipse-buildproperties</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/build.properties</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(jre\.compilation\.profile *= *)(.*)$</token>
									<value>$1${sarl-dsl.min.jre.environment}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
					<execution>
						<id>prepare-eclipse-manifestmf</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/META-INF/MANIFEST.MF</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(Bundle-RequiredExecutionEnvironment: *)(.*)$</token>
									<value>$1${sarl-run.min.jre.environment}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
					<execution>
						<id>prepare-eclipse-aboutbox</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/about.mappings</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(0 *= *)(.*)$</token>
									<value>$1${sarl.buildId}</value>
								</replacement>
								<replacement>
									<token>^(1 *= *)(.*)$</token>
									<value>$1${sarl.inception.year}-${sarl.last.year}</value>
								</replacement>
								<replacement>
									<token>^(2 *= *)(.*)$</token>
									<value>$1${sarl.copyrighters}</value>
								</replacement>
								<replacement>
									<token>^(3 *= *)(.*)$</token>
									<value>$1${sarl.url}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
