/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2023 SARL.io, the Original Authors and Main Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.goap.plan

import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * Implementation of a plan of actions using a concurrent linked queue.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class ConcurrentGoapPlan extends ConcurrentLinkedQueue<GoapAction> implements GoapPlan {

	@Accessors
	val id : UUID

	val listeners = <GoapPlanListener>newArrayList

	/** Construct the plan.
	 *
	 * @param id the identifier of the plan. If {@code null}, the identifier is randomly selected.
	 */
	new (id : UUID = null) {
		this.id = if (id === null) UUID::randomUUID else id
	}

	synchronized override addGoalPlanListener(listener : GoapPlanListener) {
		this.listeners += listener
	}

	override removeGoalPlanListener(listener : GoapPlanListener) {
		this.listeners -= listener
	}

}
