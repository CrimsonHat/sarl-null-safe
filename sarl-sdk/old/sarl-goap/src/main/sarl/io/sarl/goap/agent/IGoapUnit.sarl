/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2021 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.goap.^agent

import io.sarl.goap.state.GoapAction
import java.util.Queue
import java.util.Set
import io.sarl.goap.state.GoapState
import java.util.List

/** Interface which all assigned GOAP agents have to implement.
 * 
 * @author $Author: sgalland$
 * @author $Author: ph$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
interface IGoapUnit {

	/**
	 * Gets called when a plan was found by the planner.
	 * 
	 * @param actions the actions the unit hat to take in order to archive the goal.
	 */
	def goapPlanFound(actions : Queue<GoapAction>)

	/**
	 * Gets called when a plan failed to execute.
	 *
	 * @param actions
	 *            the remaining actions in the action Queue that failed.
	 */
	def goapPlanFailed(actions : Queue<GoapAction>)

	/**
	 * Gets called when a plan was finished.
	 */
	def goapPlanFinished

	/**
	 * General update from the Agent. Called in a loop until the program ends.
	 */
	def update

	/**
	 * Function to move to a specific location. Gets called by the moveToState
	 * when the unit has to move to a certain target.
	 *
	 * @param target
	 *            the target the unit has to move to.
	 * @return true or false depending if the unit was able to move.
	 */
	def moveTo(target : Object) : boolean
	
	def getWorldState : Set<GoapState>
	 
	def getGoalState : List<GoapState>

	def getAvailableActions : Set<GoapAction>
	
}
