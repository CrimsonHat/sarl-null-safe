package io.sarl.demos.basic.inheritance

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Schedules

agent AbstractAgent {

	uses Logging

	protected var i : int = 0;

	on Initialize {
		info("1: Hello World in the super agent!")
	}


	on Initialize[i<0] {
		info("This message must not be displayed")
		i++
	}
	
	/* A disjoint condition from the previous */
	on Initialize[i>=0] {
		info("2:[i>=0]Parent: This message should be displayed")
		i--
	}

	def sayGoodBye : void {
		info("Parent: Goodbye World!")
	}
	
	on Destroy {
		sayGoodBye
	}

}

/*
 * A "Hello World" Agent inherited from AbstractAgent and demonstrating how to overload event behaviors
 */
agent HelloChildAgent extends AbstractAgent{
	
	uses Logging, Lifecycle, Schedules
	
	/* Print "Hello World" when spawned and wait 2 seconds before kill itself */
	on Initialize {
		info("5: Hello World in the child agent!")

		in(200)[killMe]
		//killMe

	} 
	
	/* No condition, it is always executed */
	on Initialize {
		info("4: Child: Discouraged method to have two Initialize behavior within the same agent but it works like a charm. Even if you killed an agent within one of its Initialize Behaviors, all of them will be executed prior to anything")
	
	}
	
	/* Complete parent behavior for i>0, the parent beahvior is also executed */
	on Initialize[i>=0] {
		info("3: [i>=0] Child: This message should be displayed too.")
	}
	

	override sayGoodBye {
		info("Child: Goodbye World from the child!")
	}
	
	/* Print "Goodbye World" before dying */
	on Destroy {
		sayGoodBye
	}
	
	
	on ContextJoined {
		info("ContextJoined, contextID:"+occurrence.holonContextID+" SpaceID: "+occurrence.defaultSpaceID)
	}
	
	on ContextLeft {
		info("ContextLeft, contextID:"+occurrence.holonContextID)
	}
	
	on MemberJoined {
		info("MemberJoined, agentID:"+occurrence.agentID)
	}
	
	on MemberLeft {
		info("MemberLeft, agentID:"+occurrence.agentID)		
	}
	
	on AgentSpawned {
		info("AgentSpawned, agentID:"+occurrence.agentID+" AgentType: "+occurrence.agentType)		
	}
	
	on AgentKilled {
		info("AgentKilled, agentID:"+occurrence.agentID)	
	}
	
}
