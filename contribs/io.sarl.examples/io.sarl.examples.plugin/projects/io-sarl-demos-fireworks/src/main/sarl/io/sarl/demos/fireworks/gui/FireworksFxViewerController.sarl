package io.sarl.demos.fireworks.gui;

import io.sarl.demos.fireworks.environment.Positions
import io.sarl.demos.fireworks.events.CreateArea
import io.sarl.demos.fireworks.events.Freeze
import io.sarl.demos.fireworks.events.SetupSettings
import io.sarl.demos.fireworks.gui.fx.FxViewerController
import javafx.animation.PauseTransition
import javafx.fxml.FXML
import javafx.scene.canvas.Canvas
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar

import static extension javafx.util.Duration.*

/** JavaFX controller for fireworks.
 */
class FireworksFxViewerController extends FxViewerController {

	var launched = false
	var areaCreated = false

	@FXML var draw_zone : Canvas
	@FXML var gravity_display : Label
	@FXML var rocket_quantity_display : Label
	@FXML var fire_quantity_display : Label
	@FXML var gravity_input : ScrollBar
	@FXML var rocket_quantity_input : ScrollBar
	@FXML var fire_quantity_input : ScrollBar
	@FXML var setup_button : Button
	@FXML var launch_button : Button
	@FXML var stop_button : Button

	/** Get gravity.
	 */
	def getGravity : double {
		gravity_input.value
	}

	/**  Get rocket quantity.
	 */
	def getRocketQuantity : int {
		rocket_quantity_input.value as int
	}

	/** Get fire quantity.
	 */
	def getFireQuantity : int {
		fire_quantity_input.value as int
	}

	/** Draw every positions on the main canvas.
	 */
	def listenAndDraw(grid : Positions) {
		var gc = draw_zone.graphicsContext2D
		var wait = new PauseTransition(0.03.seconds)

		wait.onFinished = [
			gc.clearRect(0, 0, draw_zone.width, draw_zone.height)
			grid.rockets([rocket|!rocket.hidden]) [rocket |
				gc.fill = rocket.color
				gc.fillOval(rocket.position.get(0), rocket.position.get(1), 10, 10)
			]

			grid.^fires [fire |
				gc.fill = fire.color
				fire.positions.forEach(pos |
					{
					gc.fillOval(pos.get(0), pos.get(1), 3, 3)
					})
			]
			wait.playFromStart
		]
		wait.play
	}

	/** Create main SARL agent and do setup.
	 */
	@FXML protected def actionSetup {
		var ^event = new SetupSettings(this.rocketQuantity, this.fireQuantity,
			this.gravity, this.draw_zone.width)
		if (!launched) {
			startAgentApplication() [
				emitToAgents(^event)
			]
			launch_button.disable = false
			launched = true
			areaCreated = false
			gravity_input.disable = true
			fire_quantity_input.disable = true
			rocket_quantity_input.disable = true
			setup_button.disable = true
		} else {
			emitToAgents(^event)
		}
	}

	/** Launch fireworks.
	 */
	@FXML protected def actionLaunch {
		launch_button.disable = true
		stop_button.disable = false
		setup_button.disable = true
		if (!areaCreated) {
			emitToAgents(new CreateArea)
			this.areaCreated = true
		} else {
			emitToAgents(new Freeze(false))
		}
	}

	/** Stop fireworks.
	 */
	@FXML protected def actionStop {
		stop_button.disable = true
		launch_button.disable = false
		emitToAgents(new Freeze(true))
	}

	/** Add a listener on gravity.
	 */
	@FXML protected def actionGravityDisplay {
		gravity_input.valueProperty.addListener [
			gravity_display.text = String::format("%.1f", gravity_input.value)
		]
	}

	/* Add a listener on rocket quantity.
	 */
	@FXML protected def actionRocketQuantityDisplay {
		rocket_quantity_input.valueProperty().addListener [
			rocket_quantity_display.setText(String.format("%.0f", rocket_quantity_input.getValue()));
		];
	}

	/* Add a listener on fire quantity.
	 */
	@FXML protected def actionFireQuantityDisplay() {
		fire_quantity_input.valueProperty.addListener [
			fire_quantity_display.text = String::format("%.0f", fire_quantity_input.value)
		]
	}

}
