/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.boids

import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.demos.boids.gui.EnvironmentGui
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.Map
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/**
 * @author Nicolas Gaud
 */
class BoidsSimulation implements EventListener {

	public static val id = UUID::randomUUID

	/**
	 * SRE Kernel instance
	 */
	var kernel : SREBootstrap
	
	/**
	 * The default SARL context where environment and boids are spawned
	 */
	var defaultSARLContext : AgentContext
		
	/**
	 * Identifier of the environment
	 */
	var environment : UUID
		
	var width = Settings::EnvtWidth

	var height = Settings::EnvtHeight
	
	var boidsToLaunch : Map<Population, Integer> 
	
	var boidsCount : int
	
	var isSimulationStarted = false
	
	var boidBodies : ConcurrentHashMap<UUID, PerceivedBoidBody>
	
	var myGUI : EnvironmentGui 
	
	new {
		boidsCount = 0
		
		this.boidBodies = new ConcurrentHashMap
				
		boidsToLaunch = newHashMap
	}
	
	def start : void {
		launchAllAgents
		isSimulationStarted = true
	}
	
	def stop : void {
		killAllAgents
		isSimulationStarted = false
	}
	
	/**
	 * Add the boids of a population.
	 *
	 * @param p - the population to add.
	 */
	def addBoid(p : Population) : void {
		boidsCount++
		if (!isSimulationStarted) {
			var currentBoidCount = boidsToLaunch.get(p)
			if (currentBoidCount !== null){
				currentBoidCount++
			} else {
				currentBoidCount = new Integer(1)				
			}
			boidsToLaunch.put(p, currentBoidCount)
		} else {
			launchBoid(p, "Boid" + boidsCount)
		}
	}
	
	private def launchAllAgents : void {
		
		kernel = SRE::getBootstrap
		
		defaultSARLContext = kernel.startWithoutAgent
		
		environment = kernel.startAgent(typeof(Environment), height,width)

		launchAllBoids
		
		this.myGUI = new EnvironmentGui(height,width,this.boidBodies)
		
		//Sent start to Environment
		var ^space = defaultSARLContext.defaultSpace as OpenEventSpace
		^space.register(this)
		^space.emit(id, new Start(this.boidBodies))
	}
	
	private def launchAllBoids : void {
		var boidNum = 0
		for(e : boidsToLaunch.entrySet) {			
			for (var i = 0; i < e.value; i++) {
				boidNum++
				e.key.launchBoid("Boid" + boidNum)
			}
		}
	}
	
	@SuppressWarnings("constant_condition", "discouraged_reference")
	private def launchBoid(p : Population, boidName : String) : void {
		var initialPosition = new Vector2d((Math::random - 0.5) * width, (Math::random - 0.5) * height)
		var initialVitesse = new Vector2d(Math::random - 0.5, Math::random - 0.5)
		
		var b = kernel.startAgent(typeof(Boid), environment, height, width, p, initialPosition, initialVitesse, boidName)
		this.boidBodies.put(b, new PerceivedBoidBody(p, b, initialPosition, initialVitesse))
		
		if (Settings::isLogActivated) {
			System.out.println("Lancement d'un boid Ã  la position " + initialPosition + " et avec une vitesse de " + initialVitesse)
		}
	}
	

	private def killAllAgents : void {
		//do something
	}

	override getID : UUID {
		id
	}

	override receiveEvent(^event : Event) {
		if (^event instanceof GuiRepaint) {
			this.myGUI.boids = ^event.perceivedAgentBody
			this.myGUI.repaint
		}
	}

}
